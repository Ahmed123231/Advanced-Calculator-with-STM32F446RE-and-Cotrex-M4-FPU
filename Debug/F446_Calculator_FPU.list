
F446_Calculator_FPU.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000151c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  080016e0  080016e0  000116e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001704  08001704  00020080  2**0
                  CONTENTS
  4 .ARM          00000000  08001704  08001704  00020080  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001704  08001704  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001704  08001704  00011704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001708  08001708  00011708  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  0800170c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000004c  20000080  0800178c  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000cc  0800178c  000200cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001e12  00000000  00000000  000200f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000822  00000000  00000000  00021f05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000220  00000000  00000000  00022728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000175  00000000  00000000  00022948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00001fa7  00000000  00000000  00022abd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002f42  00000000  00000000  00024a64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00008390  00000000  00000000  000279a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000728  00000000  00000000  0002fd38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00030460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000080 	.word	0x20000080
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080016c8 	.word	0x080016c8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000084 	.word	0x20000084
 8000200:	080016c8 	.word	0x080016c8

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_d2uiz>:
 800057c:	004a      	lsls	r2, r1, #1
 800057e:	d211      	bcs.n	80005a4 <__aeabi_d2uiz+0x28>
 8000580:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000584:	d211      	bcs.n	80005aa <__aeabi_d2uiz+0x2e>
 8000586:	d50d      	bpl.n	80005a4 <__aeabi_d2uiz+0x28>
 8000588:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800058c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000590:	d40e      	bmi.n	80005b0 <__aeabi_d2uiz+0x34>
 8000592:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000596:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800059a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800059e:	fa23 f002 	lsr.w	r0, r3, r2
 80005a2:	4770      	bx	lr
 80005a4:	f04f 0000 	mov.w	r0, #0
 80005a8:	4770      	bx	lr
 80005aa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80005ae:	d102      	bne.n	80005b6 <__aeabi_d2uiz+0x3a>
 80005b0:	f04f 30ff 	mov.w	r0, #4294967295
 80005b4:	4770      	bx	lr
 80005b6:	f04f 0000 	mov.w	r0, #0
 80005ba:	4770      	bx	lr

080005bc <EnableFPU>:
	Function to Enable Floating point unit in cortex M4 Processors

*/


void EnableFPU(void){
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0


	uint32_t Loc_u32Value;
	/*Read the current value of the CPACR register*/
    Loc_u32Value = CPACR;
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <EnableFPU+0x30>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	607b      	str	r3, [r7, #4]

    /*Set bits 20-23 to enable CP10 and CP11 coprocessors*/
    Loc_u32Value |= (0xF << 20);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005ce:	607b      	str	r3, [r7, #4]

    /*Write the modified value back to the CPACR register*/
    CPACR = Loc_u32Value;
 80005d0:	4a06      	ldr	r2, [pc, #24]	; (80005ec <EnableFPU+0x30>)
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	6013      	str	r3, [r2, #0]
	/*Data Synchronization Barrier*/
	__asm volatile("dsb");
 80005d6:	f3bf 8f4f 	dsb	sy
	/*Instruction Synchronization Barrier*/
	__asm volatile("isb");
 80005da:	f3bf 8f6f 	isb	sy
	
	
}
 80005de:	bf00      	nop
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	e000ed88 	.word	0xe000ed88

080005f0 <GPIO_u8PinInit>:
 * @param[in] PinConfig Pointer to a PinConfig_t structure that contains
 *                  the configuration information for the specified GPIO pin.
 * @return uint8_t Status of the initialization (0 = success, 1 = error)
 */
uint8_t GPIO_u8PinInit(const PinConfig_t* PinConfig)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	uint8_t Local_u8ErrorState = OK;
 80005f8:	2301      	movs	r3, #1
 80005fa:	73fb      	strb	r3, [r7, #15]

	    if (PinConfig != NULL)
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	f000 8117 	beq.w	8000832 <GPIO_u8PinInit+0x242>
	    {
	        if ((PinConfig->Port <= PORTH) && (PinConfig->PinNum <= PIN15))
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	2b07      	cmp	r3, #7
 800060a:	f200 810f 	bhi.w	800082c <GPIO_u8PinInit+0x23c>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	785b      	ldrb	r3, [r3, #1]
 8000612:	2b0f      	cmp	r3, #15
 8000614:	f200 810a 	bhi.w	800082c <GPIO_u8PinInit+0x23c>
	        {
	            // Configure Mode: Input, Output, Analog, or Alternate Function
	            (GPIO_Port[PinConfig->Port]->MODER) &= ~(MODER_MASK << (PinConfig->PinNum * 2));
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	781b      	ldrb	r3, [r3, #0]
 800061c:	461a      	mov	r2, r3
 800061e:	4b8a      	ldr	r3, [pc, #552]	; (8000848 <GPIO_u8PinInit+0x258>)
 8000620:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	785b      	ldrb	r3, [r3, #1]
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	2103      	movs	r1, #3
 800062e:	fa01 f303 	lsl.w	r3, r1, r3
 8000632:	43db      	mvns	r3, r3
 8000634:	4619      	mov	r1, r3
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	781b      	ldrb	r3, [r3, #0]
 800063a:	4618      	mov	r0, r3
 800063c:	4b82      	ldr	r3, [pc, #520]	; (8000848 <GPIO_u8PinInit+0x258>)
 800063e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000642:	400a      	ands	r2, r1
 8000644:	601a      	str	r2, [r3, #0]
	            (GPIO_Port[PinConfig->Port]->MODER) |= (PinConfig->Mode << (PinConfig->PinNum * 2));
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	781b      	ldrb	r3, [r3, #0]
 800064a:	461a      	mov	r2, r3
 800064c:	4b7e      	ldr	r3, [pc, #504]	; (8000848 <GPIO_u8PinInit+0x258>)
 800064e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000652:	681a      	ldr	r2, [r3, #0]
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	789b      	ldrb	r3, [r3, #2]
 8000658:	4619      	mov	r1, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	785b      	ldrb	r3, [r3, #1]
 800065e:	005b      	lsls	r3, r3, #1
 8000660:	fa01 f303 	lsl.w	r3, r1, r3
 8000664:	4619      	mov	r1, r3
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	4618      	mov	r0, r3
 800066c:	4b76      	ldr	r3, [pc, #472]	; (8000848 <GPIO_u8PinInit+0x258>)
 800066e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8000672:	430a      	orrs	r2, r1
 8000674:	601a      	str	r2, [r3, #0]

	            // Configure Pull-up/Pull-down, for both Input and Output modes
	            (GPIO_Port[PinConfig->Port]->PUPDR) &= ~(PUPDR_MASK << (PinConfig->PinNum * 2));
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	461a      	mov	r2, r3
 800067c:	4b72      	ldr	r3, [pc, #456]	; (8000848 <GPIO_u8PinInit+0x258>)
 800067e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000682:	68da      	ldr	r2, [r3, #12]
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	785b      	ldrb	r3, [r3, #1]
 8000688:	005b      	lsls	r3, r3, #1
 800068a:	2103      	movs	r1, #3
 800068c:	fa01 f303 	lsl.w	r3, r1, r3
 8000690:	43db      	mvns	r3, r3
 8000692:	4619      	mov	r1, r3
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	4618      	mov	r0, r3
 800069a:	4b6b      	ldr	r3, [pc, #428]	; (8000848 <GPIO_u8PinInit+0x258>)
 800069c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80006a0:	400a      	ands	r2, r1
 80006a2:	60da      	str	r2, [r3, #12]
	            (GPIO_Port[PinConfig->Port]->PUPDR) |= (PinConfig->PullType << (PinConfig->PinNum * 2));
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b67      	ldr	r3, [pc, #412]	; (8000848 <GPIO_u8PinInit+0x258>)
 80006ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006b0:	68da      	ldr	r2, [r3, #12]
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	795b      	ldrb	r3, [r3, #5]
 80006b6:	4619      	mov	r1, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	785b      	ldrb	r3, [r3, #1]
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	fa01 f303 	lsl.w	r3, r1, r3
 80006c2:	4619      	mov	r1, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	781b      	ldrb	r3, [r3, #0]
 80006c8:	4618      	mov	r0, r3
 80006ca:	4b5f      	ldr	r3, [pc, #380]	; (8000848 <GPIO_u8PinInit+0x258>)
 80006cc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 80006d0:	430a      	orrs	r2, r1
 80006d2:	60da      	str	r2, [r3, #12]

	            // Configure Output Type and Speed (if Mode is Output or Alternate Function)
	            if (PinConfig->Mode == OUTPUT || PinConfig->Mode == ALTERNATE_FUNCTION)
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	789b      	ldrb	r3, [r3, #2]
 80006d8:	2b01      	cmp	r3, #1
 80006da:	d004      	beq.n	80006e6 <GPIO_u8PinInit+0xf6>
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	789b      	ldrb	r3, [r3, #2]
 80006e0:	2b02      	cmp	r3, #2
 80006e2:	f040 80a9 	bne.w	8000838 <GPIO_u8PinInit+0x248>
	            {
	                // Set Output Type: PushPull or Open Drain
	                (GPIO_Port[PinConfig->Port]->OTYPER) &= ~(OTYPER_MASK << PinConfig->PinNum);
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	781b      	ldrb	r3, [r3, #0]
 80006ea:	461a      	mov	r2, r3
 80006ec:	4b56      	ldr	r3, [pc, #344]	; (8000848 <GPIO_u8PinInit+0x258>)
 80006ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006f2:	685a      	ldr	r2, [r3, #4]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	785b      	ldrb	r3, [r3, #1]
 80006f8:	4619      	mov	r1, r3
 80006fa:	2301      	movs	r3, #1
 80006fc:	408b      	lsls	r3, r1
 80006fe:	43db      	mvns	r3, r3
 8000700:	4619      	mov	r1, r3
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	781b      	ldrb	r3, [r3, #0]
 8000706:	4618      	mov	r0, r3
 8000708:	4b4f      	ldr	r3, [pc, #316]	; (8000848 <GPIO_u8PinInit+0x258>)
 800070a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800070e:	400a      	ands	r2, r1
 8000710:	605a      	str	r2, [r3, #4]
	                (GPIO_Port[PinConfig->Port]->OTYPER) |= (PinConfig->OutputType << PinConfig->PinNum);
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	461a      	mov	r2, r3
 8000718:	4b4b      	ldr	r3, [pc, #300]	; (8000848 <GPIO_u8PinInit+0x258>)
 800071a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800071e:	685a      	ldr	r2, [r3, #4]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	791b      	ldrb	r3, [r3, #4]
 8000724:	4619      	mov	r1, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	785b      	ldrb	r3, [r3, #1]
 800072a:	fa01 f303 	lsl.w	r3, r1, r3
 800072e:	4619      	mov	r1, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	4618      	mov	r0, r3
 8000736:	4b44      	ldr	r3, [pc, #272]	; (8000848 <GPIO_u8PinInit+0x258>)
 8000738:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800073c:	430a      	orrs	r2, r1
 800073e:	605a      	str	r2, [r3, #4]

	                // Set Output Speed: Low, Medium, High, or Very High
	                (GPIO_Port[PinConfig->Port]->OSPEEDR) &= ~(OSPEEDR_MASK << (PinConfig->PinNum * 2));
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	781b      	ldrb	r3, [r3, #0]
 8000744:	461a      	mov	r2, r3
 8000746:	4b40      	ldr	r3, [pc, #256]	; (8000848 <GPIO_u8PinInit+0x258>)
 8000748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800074c:	689a      	ldr	r2, [r3, #8]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	785b      	ldrb	r3, [r3, #1]
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	2103      	movs	r1, #3
 8000756:	fa01 f303 	lsl.w	r3, r1, r3
 800075a:	43db      	mvns	r3, r3
 800075c:	4619      	mov	r1, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	781b      	ldrb	r3, [r3, #0]
 8000762:	4618      	mov	r0, r3
 8000764:	4b38      	ldr	r3, [pc, #224]	; (8000848 <GPIO_u8PinInit+0x258>)
 8000766:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800076a:	400a      	ands	r2, r1
 800076c:	609a      	str	r2, [r3, #8]
	                (GPIO_Port[PinConfig->Port]->OSPEEDR) |= (PinConfig->Speed << (PinConfig->PinNum * 2));
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	461a      	mov	r2, r3
 8000774:	4b34      	ldr	r3, [pc, #208]	; (8000848 <GPIO_u8PinInit+0x258>)
 8000776:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800077a:	689a      	ldr	r2, [r3, #8]
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	78db      	ldrb	r3, [r3, #3]
 8000780:	4619      	mov	r1, r3
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	785b      	ldrb	r3, [r3, #1]
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	fa01 f303 	lsl.w	r3, r1, r3
 800078c:	4619      	mov	r1, r3
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	4618      	mov	r0, r3
 8000794:	4b2c      	ldr	r3, [pc, #176]	; (8000848 <GPIO_u8PinInit+0x258>)
 8000796:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800079a:	430a      	orrs	r2, r1
 800079c:	609a      	str	r2, [r3, #8]

	                // If Mode is Alternate Function, configure Alternate Function Registers (AFR)
	                if (PinConfig->Mode == ALTERNATE_FUNCTION)
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	789b      	ldrb	r3, [r3, #2]
 80007a2:	2b02      	cmp	r3, #2
 80007a4:	d148      	bne.n	8000838 <GPIO_u8PinInit+0x248>
	                {
	                    uint8_t Local_RegNum = PinConfig->PinNum / 8;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	785b      	ldrb	r3, [r3, #1]
 80007aa:	08db      	lsrs	r3, r3, #3
 80007ac:	73bb      	strb	r3, [r7, #14]
	                    uint8_t Local_BitNum = PinConfig->PinNum % 8;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	785b      	ldrb	r3, [r3, #1]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	737b      	strb	r3, [r7, #13]
	                    (GPIO_Port[PinConfig->Port]->AFR[Local_RegNum]) &= ~(AFR_MASK << (Local_BitNum * 4));
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	461a      	mov	r2, r3
 80007be:	4b22      	ldr	r3, [pc, #136]	; (8000848 <GPIO_u8PinInit+0x258>)
 80007c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007c4:	7bba      	ldrb	r2, [r7, #14]
 80007c6:	3208      	adds	r2, #8
 80007c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007cc:	7b7b      	ldrb	r3, [r7, #13]
 80007ce:	009b      	lsls	r3, r3, #2
 80007d0:	220f      	movs	r2, #15
 80007d2:	fa02 f303 	lsl.w	r3, r2, r3
 80007d6:	43db      	mvns	r3, r3
 80007d8:	4618      	mov	r0, r3
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	461a      	mov	r2, r3
 80007e0:	4b19      	ldr	r3, [pc, #100]	; (8000848 <GPIO_u8PinInit+0x258>)
 80007e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007e6:	7bba      	ldrb	r2, [r7, #14]
 80007e8:	4001      	ands	r1, r0
 80007ea:	3208      	adds	r2, #8
 80007ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	                    (GPIO_Port[PinConfig->Port]->AFR[Local_RegNum]) |= (PinConfig->AltFunc << (Local_BitNum * 4));
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	781b      	ldrb	r3, [r3, #0]
 80007f4:	461a      	mov	r2, r3
 80007f6:	4b14      	ldr	r3, [pc, #80]	; (8000848 <GPIO_u8PinInit+0x258>)
 80007f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007fc:	7bba      	ldrb	r2, [r7, #14]
 80007fe:	3208      	adds	r2, #8
 8000800:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	799b      	ldrb	r3, [r3, #6]
 8000808:	461a      	mov	r2, r3
 800080a:	7b7b      	ldrb	r3, [r7, #13]
 800080c:	009b      	lsls	r3, r3, #2
 800080e:	fa02 f303 	lsl.w	r3, r2, r3
 8000812:	4618      	mov	r0, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4b0b      	ldr	r3, [pc, #44]	; (8000848 <GPIO_u8PinInit+0x258>)
 800081c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000820:	7bba      	ldrb	r2, [r7, #14]
 8000822:	4301      	orrs	r1, r0
 8000824:	3208      	adds	r2, #8
 8000826:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	            if (PinConfig->Mode == OUTPUT || PinConfig->Mode == ALTERNATE_FUNCTION)
 800082a:	e005      	b.n	8000838 <GPIO_u8PinInit+0x248>
	                }
	            }
	        }
	        else
	        {
	            Local_u8ErrorState = NOK; // Invalid Port or PinNum
 800082c:	2302      	movs	r3, #2
 800082e:	73fb      	strb	r3, [r7, #15]
 8000830:	e003      	b.n	800083a <GPIO_u8PinInit+0x24a>
	        }
	    }
	    else
	    {
	        Local_u8ErrorState = NULL_PTR_ERR; // Null pointer passed
 8000832:	2303      	movs	r3, #3
 8000834:	73fb      	strb	r3, [r7, #15]
 8000836:	e000      	b.n	800083a <GPIO_u8PinInit+0x24a>
	            if (PinConfig->Mode == OUTPUT || PinConfig->Mode == ALTERNATE_FUNCTION)
 8000838:	bf00      	nop
	    }

	    return Local_u8ErrorState;
 800083a:	7bfb      	ldrb	r3, [r7, #15]

}
 800083c:	4618      	mov	r0, r3
 800083e:	3714      	adds	r7, #20
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	20000000 	.word	0x20000000

0800084c <GPIO_u8SetPinValue>:
 * @param PinNum Pin number (e.g., PIN0, PIN1).
 * @param PinVal Value to set the pin (PIN_LOW or PIN_HIGH).
 * @return uint8_t Status of the operation (0 = success, 1 = error)
 */
uint8_t GPIO_u8SetPinValue(Port_t Port, Pin_t PinNum, PinVal_t PinVal)
{
 800084c:	b480      	push	{r7}
 800084e:	b085      	sub	sp, #20
 8000850:	af00      	add	r7, sp, #0
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
 8000856:	460b      	mov	r3, r1
 8000858:	71bb      	strb	r3, [r7, #6]
 800085a:	4613      	mov	r3, r2
 800085c:	717b      	strb	r3, [r7, #5]

		uint8_t Local_u8ErrorState;

		if((Port <=PORTH )&&(PinNum <=PIN15))
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	2b07      	cmp	r3, #7
 8000862:	d82e      	bhi.n	80008c2 <GPIO_u8SetPinValue+0x76>
 8000864:	79bb      	ldrb	r3, [r7, #6]
 8000866:	2b0f      	cmp	r3, #15
 8000868:	d82b      	bhi.n	80008c2 <GPIO_u8SetPinValue+0x76>
		{
			if(PinVal == PIN_LOW)
 800086a:	797b      	ldrb	r3, [r7, #5]
 800086c:	2b00      	cmp	r3, #0
 800086e:	d111      	bne.n	8000894 <GPIO_u8SetPinValue+0x48>
			{

				GPIO_Port[Port]->ODR &= ~(1<<PinNum); /* Read Modify Write Takes At Least 3 ClockCycles*/
 8000870:	79fb      	ldrb	r3, [r7, #7]
 8000872:	4a18      	ldr	r2, [pc, #96]	; (80008d4 <GPIO_u8SetPinValue+0x88>)
 8000874:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000878:	695a      	ldr	r2, [r3, #20]
 800087a:	79bb      	ldrb	r3, [r7, #6]
 800087c:	2101      	movs	r1, #1
 800087e:	fa01 f303 	lsl.w	r3, r1, r3
 8000882:	43db      	mvns	r3, r3
 8000884:	4618      	mov	r0, r3
 8000886:	79fb      	ldrb	r3, [r7, #7]
 8000888:	4912      	ldr	r1, [pc, #72]	; (80008d4 <GPIO_u8SetPinValue+0x88>)
 800088a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800088e:	4002      	ands	r2, r0
 8000890:	615a      	str	r2, [r3, #20]
			if(PinVal == PIN_LOW)
 8000892:	e018      	b.n	80008c6 <GPIO_u8SetPinValue+0x7a>
				/*GPIO_Port[Port]->BSRR =1<<(16+PinNum)*/ /*Takes Only One ClockCycle*/

			}
			else if(PinVal == PIN_HIGH)
 8000894:	797b      	ldrb	r3, [r7, #5]
 8000896:	2b01      	cmp	r3, #1
 8000898:	d110      	bne.n	80008bc <GPIO_u8SetPinValue+0x70>
			{

				GPIO_Port[Port]->ODR |= (1<<PinNum);/* Read Modify Write Takes At Least 3 ClockCycles*/
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	4a0d      	ldr	r2, [pc, #52]	; (80008d4 <GPIO_u8SetPinValue+0x88>)
 800089e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008a2:	695a      	ldr	r2, [r3, #20]
 80008a4:	79bb      	ldrb	r3, [r7, #6]
 80008a6:	2101      	movs	r1, #1
 80008a8:	fa01 f303 	lsl.w	r3, r1, r3
 80008ac:	4618      	mov	r0, r3
 80008ae:	79fb      	ldrb	r3, [r7, #7]
 80008b0:	4908      	ldr	r1, [pc, #32]	; (80008d4 <GPIO_u8SetPinValue+0x88>)
 80008b2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80008b6:	4302      	orrs	r2, r0
 80008b8:	615a      	str	r2, [r3, #20]
			if(PinVal == PIN_LOW)
 80008ba:	e004      	b.n	80008c6 <GPIO_u8SetPinValue+0x7a>
				/*GPIO_Port[Port]->BSRR =1<<(PinNum) *//*Takes Only One ClockCycle*/
			}
			else
			{

				Local_u8ErrorState = NOK;
 80008bc:	2302      	movs	r3, #2
 80008be:	73fb      	strb	r3, [r7, #15]
			if(PinVal == PIN_LOW)
 80008c0:	e001      	b.n	80008c6 <GPIO_u8SetPinValue+0x7a>

		}
		else
		{

			Local_u8ErrorState=NOK;
 80008c2:	2302      	movs	r3, #2
 80008c4:	73fb      	strb	r3, [r7, #15]





		return Local_u8ErrorState;
 80008c6:	7bfb      	ldrb	r3, [r7, #15]



}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	20000000 	.word	0x20000000

080008d8 <GPIO_u8ReadPinValue>:
 * @param PinNum Pin number to read.
 * @param PinVal Pointer to store the read pin value.
 * @return uint8_t Status of the operation (0 = success, 1 = error)
 */
uint8_t GPIO_u8ReadPinValue(Port_t Port, Pin_t PinNum, PinVal_t *PinVal)
{
 80008d8:	b480      	push	{r7}
 80008da:	b085      	sub	sp, #20
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	603a      	str	r2, [r7, #0]
 80008e2:	71fb      	strb	r3, [r7, #7]
 80008e4:	460b      	mov	r3, r1
 80008e6:	71bb      	strb	r3, [r7, #6]

		uint8_t Local_u8ErrorState=OK;
 80008e8:	2301      	movs	r3, #1
 80008ea:	73fb      	strb	r3, [r7, #15]


		if((Port <=PORTH )&&(PinNum <=PIN15))
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	2b07      	cmp	r3, #7
 80008f0:	d811      	bhi.n	8000916 <GPIO_u8ReadPinValue+0x3e>
 80008f2:	79bb      	ldrb	r3, [r7, #6]
 80008f4:	2b0f      	cmp	r3, #15
 80008f6:	d80e      	bhi.n	8000916 <GPIO_u8ReadPinValue+0x3e>
		{


			*PinVal = ((GPIO_Port[Port]->IDR >> PinNum)&GET_BIT_MASK);
 80008f8:	79fb      	ldrb	r3, [r7, #7]
 80008fa:	4a0b      	ldr	r2, [pc, #44]	; (8000928 <GPIO_u8ReadPinValue+0x50>)
 80008fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000900:	691a      	ldr	r2, [r3, #16]
 8000902:	79bb      	ldrb	r3, [r7, #6]
 8000904:	fa22 f303 	lsr.w	r3, r2, r3
 8000908:	b2db      	uxtb	r3, r3
 800090a:	f003 0301 	and.w	r3, r3, #1
 800090e:	b2da      	uxtb	r2, r3
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	701a      	strb	r2, [r3, #0]
 8000914:	e001      	b.n	800091a <GPIO_u8ReadPinValue+0x42>

		}
		else
	    {

				Local_u8ErrorState=NOK;
 8000916:	2302      	movs	r3, #2
 8000918:	73fb      	strb	r3, [r7, #15]

		}


		return Local_u8ErrorState;
 800091a:	7bfb      	ldrb	r3, [r7, #15]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	20000000 	.word	0x20000000

0800092c <KEYPAD_init>:




/************* Function to initialize Keypad ************/
void KEYPAD_init(void) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
    uint8_t Loc_iterator = 0;
 8000932:	2300      	movs	r3, #0
 8000934:	71fb      	strb	r3, [r7, #7]


    Row_pin1.Port=KEYPAD_ROW_PORT;
 8000936:	4b2f      	ldr	r3, [pc, #188]	; (80009f4 <KEYPAD_init+0xc8>)
 8000938:	2201      	movs	r2, #1
 800093a:	701a      	strb	r2, [r3, #0]
    Row_pin1.PinNum=KEYPAD_ROW_1_PIN;
 800093c:	4b2d      	ldr	r3, [pc, #180]	; (80009f4 <KEYPAD_init+0xc8>)
 800093e:	2204      	movs	r2, #4
 8000940:	705a      	strb	r2, [r3, #1]
    Row_pin1.Mode=INPUT;
 8000942:	4b2c      	ldr	r3, [pc, #176]	; (80009f4 <KEYPAD_init+0xc8>)
 8000944:	2200      	movs	r2, #0
 8000946:	709a      	strb	r2, [r3, #2]
    Row_pin1.OutputType=PUSH_PULL;
 8000948:	4b2a      	ldr	r3, [pc, #168]	; (80009f4 <KEYPAD_init+0xc8>)
 800094a:	2200      	movs	r2, #0
 800094c:	711a      	strb	r2, [r3, #4]
    Row_pin1.PullType=PULLUP;
 800094e:	4b29      	ldr	r3, [pc, #164]	; (80009f4 <KEYPAD_init+0xc8>)
 8000950:	2201      	movs	r2, #1
 8000952:	715a      	strb	r2, [r3, #5]

    Row_pin2.Port=KEYPAD_ROW_PORT;
 8000954:	4b28      	ldr	r3, [pc, #160]	; (80009f8 <KEYPAD_init+0xcc>)
 8000956:	2201      	movs	r2, #1
 8000958:	701a      	strb	r2, [r3, #0]
    Row_pin2.PinNum=KEYPAD_ROW_2_PIN;
 800095a:	4b27      	ldr	r3, [pc, #156]	; (80009f8 <KEYPAD_init+0xcc>)
 800095c:	2205      	movs	r2, #5
 800095e:	705a      	strb	r2, [r3, #1]
    Row_pin2.Mode=INPUT;
 8000960:	4b25      	ldr	r3, [pc, #148]	; (80009f8 <KEYPAD_init+0xcc>)
 8000962:	2200      	movs	r2, #0
 8000964:	709a      	strb	r2, [r3, #2]
    Row_pin2.OutputType=PUSH_PULL;
 8000966:	4b24      	ldr	r3, [pc, #144]	; (80009f8 <KEYPAD_init+0xcc>)
 8000968:	2200      	movs	r2, #0
 800096a:	711a      	strb	r2, [r3, #4]
    Row_pin2.PullType=PULLUP;
 800096c:	4b22      	ldr	r3, [pc, #136]	; (80009f8 <KEYPAD_init+0xcc>)
 800096e:	2201      	movs	r2, #1
 8000970:	715a      	strb	r2, [r3, #5]

    Row_pin3.Port=KEYPAD_ROW_PORT;
 8000972:	4b22      	ldr	r3, [pc, #136]	; (80009fc <KEYPAD_init+0xd0>)
 8000974:	2201      	movs	r2, #1
 8000976:	701a      	strb	r2, [r3, #0]
    Row_pin3.PinNum=KEYPAD_ROW_3_PIN;
 8000978:	4b20      	ldr	r3, [pc, #128]	; (80009fc <KEYPAD_init+0xd0>)
 800097a:	2206      	movs	r2, #6
 800097c:	705a      	strb	r2, [r3, #1]
    Row_pin3.Mode=INPUT;
 800097e:	4b1f      	ldr	r3, [pc, #124]	; (80009fc <KEYPAD_init+0xd0>)
 8000980:	2200      	movs	r2, #0
 8000982:	709a      	strb	r2, [r3, #2]
    Row_pin3.OutputType=PUSH_PULL;
 8000984:	4b1d      	ldr	r3, [pc, #116]	; (80009fc <KEYPAD_init+0xd0>)
 8000986:	2200      	movs	r2, #0
 8000988:	711a      	strb	r2, [r3, #4]
    Row_pin3.PullType=PULLUP;
 800098a:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <KEYPAD_init+0xd0>)
 800098c:	2201      	movs	r2, #1
 800098e:	715a      	strb	r2, [r3, #5]

    Row_pin4.Port=KEYPAD_ROW_PORT;
 8000990:	4b1b      	ldr	r3, [pc, #108]	; (8000a00 <KEYPAD_init+0xd4>)
 8000992:	2201      	movs	r2, #1
 8000994:	701a      	strb	r2, [r3, #0]
    Row_pin4.PinNum=KEYPAD_ROW_4_PIN;
 8000996:	4b1a      	ldr	r3, [pc, #104]	; (8000a00 <KEYPAD_init+0xd4>)
 8000998:	2207      	movs	r2, #7
 800099a:	705a      	strb	r2, [r3, #1]
    Row_pin4.Mode=INPUT;
 800099c:	4b18      	ldr	r3, [pc, #96]	; (8000a00 <KEYPAD_init+0xd4>)
 800099e:	2200      	movs	r2, #0
 80009a0:	709a      	strb	r2, [r3, #2]
    Row_pin4.OutputType=PUSH_PULL;
 80009a2:	4b17      	ldr	r3, [pc, #92]	; (8000a00 <KEYPAD_init+0xd4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	711a      	strb	r2, [r3, #4]
    Row_pin4.PullType=PULLUP;
 80009a8:	4b15      	ldr	r3, [pc, #84]	; (8000a00 <KEYPAD_init+0xd4>)
 80009aa:	2201      	movs	r2, #1
 80009ac:	715a      	strb	r2, [r3, #5]
    /* Initialize all columns as output and rows as input */
    GPIO_u8PinInit(&Row_pin1);
 80009ae:	4811      	ldr	r0, [pc, #68]	; (80009f4 <KEYPAD_init+0xc8>)
 80009b0:	f7ff fe1e 	bl	80005f0 <GPIO_u8PinInit>
    GPIO_u8PinInit(&Row_pin2);
 80009b4:	4810      	ldr	r0, [pc, #64]	; (80009f8 <KEYPAD_init+0xcc>)
 80009b6:	f7ff fe1b 	bl	80005f0 <GPIO_u8PinInit>
    GPIO_u8PinInit(&Row_pin3);
 80009ba:	4810      	ldr	r0, [pc, #64]	; (80009fc <KEYPAD_init+0xd0>)
 80009bc:	f7ff fe18 	bl	80005f0 <GPIO_u8PinInit>
    GPIO_u8PinInit(&Row_pin4);
 80009c0:	480f      	ldr	r0, [pc, #60]	; (8000a00 <KEYPAD_init+0xd4>)
 80009c2:	f7ff fe15 	bl	80005f0 <GPIO_u8PinInit>

    for (Loc_iterator = 0; Loc_iterator < 4; Loc_iterator++) {
 80009c6:	2300      	movs	r3, #0
 80009c8:	71fb      	strb	r3, [r7, #7]
 80009ca:	e00b      	b.n	80009e4 <KEYPAD_init+0xb8>
        GPIO_u8PinInit(&Key_Pad_PinConfig[Loc_iterator]);
 80009cc:	79fa      	ldrb	r2, [r7, #7]
 80009ce:	4613      	mov	r3, r2
 80009d0:	00db      	lsls	r3, r3, #3
 80009d2:	1a9b      	subs	r3, r3, r2
 80009d4:	4a0b      	ldr	r2, [pc, #44]	; (8000a04 <KEYPAD_init+0xd8>)
 80009d6:	4413      	add	r3, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff fe09 	bl	80005f0 <GPIO_u8PinInit>
    for (Loc_iterator = 0; Loc_iterator < 4; Loc_iterator++) {
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	3301      	adds	r3, #1
 80009e2:	71fb      	strb	r3, [r7, #7]
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	2b03      	cmp	r3, #3
 80009e8:	d9f0      	bls.n	80009cc <KEYPAD_init+0xa0>
    }
}
 80009ea:	bf00      	nop
 80009ec:	bf00      	nop
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}
 80009f4:	2000009c 	.word	0x2000009c
 80009f8:	200000a4 	.word	0x200000a4
 80009fc:	200000ac 	.word	0x200000ac
 8000a00:	200000b4 	.word	0x200000b4
 8000a04:	20000030 	.word	0x20000030

08000a08 <KEYPAD_GetPressedKey>:

/************ Function to return the pressed key *************/
uint8_t KEYPAD_GetPressedKey(void) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
    uint8_t Loc_rand_var = 0xFF;
 8000a0e:	23ff      	movs	r3, #255	; 0xff
 8000a10:	757b      	strb	r3, [r7, #21]

    /* Arrays holding the column and row pins */
    uint16_t Loc_u8_arr_col[4] = {
 8000a12:	4a35      	ldr	r2, [pc, #212]	; (8000ae8 <KEYPAD_GetPressedKey+0xe0>)
 8000a14:	f107 030c 	add.w	r3, r7, #12
 8000a18:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a1c:	e883 0003 	stmia.w	r3, {r0, r1}
        KEYPAD_COLUMN_2_PIN,
        KEYPAD_COLUMN_3_PIN,
        KEYPAD_COLUMN_4_PIN
    };

    uint16_t Loc_u8_arr_row[4] = {
 8000a20:	4a32      	ldr	r2, [pc, #200]	; (8000aec <KEYPAD_GetPressedKey+0xe4>)
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a28:	e883 0003 	stmia.w	r3, {r0, r1}
        KEYPAD_ROW_2_PIN,
        KEYPAD_ROW_3_PIN,
        KEYPAD_ROW_4_PIN
    };

    uint8_t Loc_u8_row_iterator = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	75fb      	strb	r3, [r7, #23]
    uint8_t Loc_u8_column_iterator = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	75bb      	strb	r3, [r7, #22]
    uint8_t Loc_Val = 0;
 8000a34:	2300      	movs	r3, #0
 8000a36:	70fb      	strb	r3, [r7, #3]

    for (Loc_u8_column_iterator = 0; Loc_u8_column_iterator < KEYPAD_COLUMNS; Loc_u8_column_iterator++) {
 8000a38:	2300      	movs	r3, #0
 8000a3a:	75bb      	strb	r3, [r7, #22]
 8000a3c:	e04b      	b.n	8000ad6 <KEYPAD_GetPressedKey+0xce>
        /* Set the current column to LOW */
        GPIO_u8SetPinValue(KEYPAD_COLUMN_PORT, Loc_u8_arr_col[Loc_u8_column_iterator], PIN_LOW);
 8000a3e:	7dbb      	ldrb	r3, [r7, #22]
 8000a40:	005b      	lsls	r3, r3, #1
 8000a42:	3318      	adds	r3, #24
 8000a44:	443b      	add	r3, r7
 8000a46:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	4619      	mov	r1, r3
 8000a50:	2002      	movs	r0, #2
 8000a52:	f7ff fefb 	bl	800084c <GPIO_u8SetPinValue>

        for (Loc_u8_row_iterator = 0; Loc_u8_row_iterator < KEYPAD_ROWS; Loc_u8_row_iterator++) {
 8000a56:	2300      	movs	r3, #0
 8000a58:	75fb      	strb	r3, [r7, #23]
 8000a5a:	e02a      	b.n	8000ab2 <KEYPAD_GetPressedKey+0xaa>
            /* Read the current row's value */
            GPIO_u8ReadPinValue(KEYPAD_ROW_PORT, Loc_u8_arr_row[Loc_u8_row_iterator], &Loc_Val);
 8000a5c:	7dfb      	ldrb	r3, [r7, #23]
 8000a5e:	005b      	lsls	r3, r3, #1
 8000a60:	3318      	adds	r3, #24
 8000a62:	443b      	add	r3, r7
 8000a64:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	1cfa      	adds	r2, r7, #3
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	2001      	movs	r0, #1
 8000a70:	f7ff ff32 	bl	80008d8 <GPIO_u8ReadPinValue>

            if (Loc_Val == 0) {  // Button is pressed
 8000a74:	78fb      	ldrb	r3, [r7, #3]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d118      	bne.n	8000aac <KEYPAD_GetPressedKey+0xa4>
                /* Get the corresponding button value */
                Loc_rand_var = KEYPAD_ButtonValues[Loc_u8_row_iterator][Loc_u8_column_iterator];
 8000a7a:	7dfa      	ldrb	r2, [r7, #23]
 8000a7c:	7dbb      	ldrb	r3, [r7, #22]
 8000a7e:	491c      	ldr	r1, [pc, #112]	; (8000af0 <KEYPAD_GetPressedKey+0xe8>)
 8000a80:	0092      	lsls	r2, r2, #2
 8000a82:	440a      	add	r2, r1
 8000a84:	4413      	add	r3, r2
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	757b      	strb	r3, [r7, #21]

                /* Wait for key release */
                do {
                    GPIO_u8ReadPinValue(KEYPAD_ROW_PORT, Loc_u8_arr_row[Loc_u8_row_iterator], &Loc_Val);
 8000a8a:	7dfb      	ldrb	r3, [r7, #23]
 8000a8c:	005b      	lsls	r3, r3, #1
 8000a8e:	3318      	adds	r3, #24
 8000a90:	443b      	add	r3, r7
 8000a92:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	1cfa      	adds	r2, r7, #3
 8000a9a:	4619      	mov	r1, r3
 8000a9c:	2001      	movs	r0, #1
 8000a9e:	f7ff ff1b 	bl	80008d8 <GPIO_u8ReadPinValue>
                } while (Loc_Val == 0);  // Loop until the button is released
 8000aa2:	78fb      	ldrb	r3, [r7, #3]
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d0f0      	beq.n	8000a8a <KEYPAD_GetPressedKey+0x82>

                return Loc_rand_var;  // Return the pressed key value
 8000aa8:	7d7b      	ldrb	r3, [r7, #21]
 8000aaa:	e018      	b.n	8000ade <KEYPAD_GetPressedKey+0xd6>
        for (Loc_u8_row_iterator = 0; Loc_u8_row_iterator < KEYPAD_ROWS; Loc_u8_row_iterator++) {
 8000aac:	7dfb      	ldrb	r3, [r7, #23]
 8000aae:	3301      	adds	r3, #1
 8000ab0:	75fb      	strb	r3, [r7, #23]
 8000ab2:	7dfb      	ldrb	r3, [r7, #23]
 8000ab4:	2b03      	cmp	r3, #3
 8000ab6:	d9d1      	bls.n	8000a5c <KEYPAD_GetPressedKey+0x54>
            }
        }

        /* Reset the column back to HIGH */
        GPIO_u8SetPinValue(KEYPAD_COLUMN_PORT, Loc_u8_arr_col[Loc_u8_column_iterator], PIN_HIGH);
 8000ab8:	7dbb      	ldrb	r3, [r7, #22]
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	3318      	adds	r3, #24
 8000abe:	443b      	add	r3, r7
 8000ac0:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 8000ac4:	b2db      	uxtb	r3, r3
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	4619      	mov	r1, r3
 8000aca:	2002      	movs	r0, #2
 8000acc:	f7ff febe 	bl	800084c <GPIO_u8SetPinValue>
    for (Loc_u8_column_iterator = 0; Loc_u8_column_iterator < KEYPAD_COLUMNS; Loc_u8_column_iterator++) {
 8000ad0:	7dbb      	ldrb	r3, [r7, #22]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	75bb      	strb	r3, [r7, #22]
 8000ad6:	7dbb      	ldrb	r3, [r7, #22]
 8000ad8:	2b03      	cmp	r3, #3
 8000ada:	d9b0      	bls.n	8000a3e <KEYPAD_GetPressedKey+0x36>
    }

    return Loc_rand_var;
 8000adc:	7d7b      	ldrb	r3, [r7, #21]
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	3718      	adds	r7, #24
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	080016e0 	.word	0x080016e0
 8000aec:	080016e8 	.word	0x080016e8
 8000af0:	20000020 	.word	0x20000020

08000af4 <LCD_PinConfig>:
				{LCD_DPORT,LCD_D7_PIN,OUTPUT,LOW,PUSH_PULL,PULLUP}

		};


void LCD_PinConfig(void){
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0

		RCC_AHB1_EnableClk(LCD_RCC_DPORT);
 8000afa:	2002      	movs	r0, #2
 8000afc:	f000 fbd0 	bl	80012a0 <RCC_AHB1_EnableClk>
		RCC_AHB1_EnableClk(LCD_RCC_CPORT);
 8000b00:	2000      	movs	r0, #0
 8000b02:	f000 fbcd 	bl	80012a0 <RCC_AHB1_EnableClk>
	    uint8_t Local_iterator =0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	71fb      	strb	r3, [r7, #7]
	    for(Local_iterator=0 ;Local_iterator <7 ;Local_iterator++)
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	71fb      	strb	r3, [r7, #7]
 8000b0e:	e00b      	b.n	8000b28 <LCD_PinConfig+0x34>
	    {

	    	GPIO_u8PinInit(&LCD_Pins[Local_iterator]);
 8000b10:	79fa      	ldrb	r2, [r7, #7]
 8000b12:	4613      	mov	r3, r2
 8000b14:	00db      	lsls	r3, r3, #3
 8000b16:	1a9b      	subs	r3, r3, r2
 8000b18:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <LCD_PinConfig+0x44>)
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f7ff fd67 	bl	80005f0 <GPIO_u8PinInit>
	    for(Local_iterator=0 ;Local_iterator <7 ;Local_iterator++)
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	3301      	adds	r3, #1
 8000b26:	71fb      	strb	r3, [r7, #7]
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	2b06      	cmp	r3, #6
 8000b2c:	d9f0      	bls.n	8000b10 <LCD_PinConfig+0x1c>

	    }



}
 8000b2e:	bf00      	nop
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	2000004c 	.word	0x2000004c

08000b3c <LCD_voidSendLowerNibble>:




/************* Function to send the lower nibble of Data ****/
void LCD_voidSendLowerNibble(uint8_t copy_u8data) {
 8000b3c:	b590      	push	{r4, r7, lr}
 8000b3e:	b089      	sub	sp, #36	; 0x24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	4603      	mov	r3, r0
 8000b44:	71fb      	strb	r3, [r7, #7]

	/***** Array to Store Data Pins ****/
	    uint32_t array_pin[4] = {
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <LCD_voidSendLowerNibble+0x60>)
 8000b48:	f107 040c 	add.w	r4, r7, #12
 8000b4c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b4e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	        LCD_D5_PIN,
	        LCD_D6_PIN,
	        LCD_D7_PIN
	    };

	    uint8_t Loc_u8_iterator = 0;
 8000b52:	2300      	movs	r3, #0
 8000b54:	77fb      	strb	r3, [r7, #31]
	    for (Loc_u8_iterator = 0; Loc_u8_iterator < 4; Loc_u8_iterator++) {
 8000b56:	2300      	movs	r3, #0
 8000b58:	77fb      	strb	r3, [r7, #31]
 8000b5a:	e016      	b.n	8000b8a <LCD_voidSendLowerNibble+0x4e>
	        // Since PIN_HIGH is 0 and PIN_LOW is 1, we invert the logic
	    	PinVal_t pinValue = (GET_BIT(copy_u8data, Loc_u8_iterator)) ? PIN_HIGH : PIN_LOW;
 8000b5c:	79fa      	ldrb	r2, [r7, #7]
 8000b5e:	7ffb      	ldrb	r3, [r7, #31]
 8000b60:	fa42 f303 	asr.w	r3, r2, r3
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	f003 0301 	and.w	r3, r3, #1
 8000b6a:	77bb      	strb	r3, [r7, #30]

	        //HAL_GPIO_WritePin(LCD_DPORT,array_pin[Loc_u8_iterator],pinValue);
	        GPIO_u8SetPinValue(LCD_DPORT,array_pin[Loc_u8_iterator],pinValue);
 8000b6c:	7ffb      	ldrb	r3, [r7, #31]
 8000b6e:	009b      	lsls	r3, r3, #2
 8000b70:	3320      	adds	r3, #32
 8000b72:	443b      	add	r3, r7
 8000b74:	f853 3c14 	ldr.w	r3, [r3, #-20]
 8000b78:	b2db      	uxtb	r3, r3
 8000b7a:	7fba      	ldrb	r2, [r7, #30]
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	2002      	movs	r0, #2
 8000b80:	f7ff fe64 	bl	800084c <GPIO_u8SetPinValue>
	    for (Loc_u8_iterator = 0; Loc_u8_iterator < 4; Loc_u8_iterator++) {
 8000b84:	7ffb      	ldrb	r3, [r7, #31]
 8000b86:	3301      	adds	r3, #1
 8000b88:	77fb      	strb	r3, [r7, #31]
 8000b8a:	7ffb      	ldrb	r3, [r7, #31]
 8000b8c:	2b03      	cmp	r3, #3
 8000b8e:	d9e5      	bls.n	8000b5c <LCD_voidSendLowerNibble+0x20>
	    }
}
 8000b90:	bf00      	nop
 8000b92:	bf00      	nop
 8000b94:	3724      	adds	r7, #36	; 0x24
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd90      	pop	{r4, r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	080016f0 	.word	0x080016f0

08000ba0 <LCD_voidSetEnable>:

/****** Function to Set Enable Pin ************/
void LCD_voidSetEnable(void) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
    /******** SET EN PIN HIGH *********/
	//HAL_GPIO_WritePin(LCD_CPORT, LCD_EN_PIN, GPIO_PIN_SET);
	GPIO_u8SetPinValue(LCD_CPORT, LCD_EN_PIN,PIN_HIGH);
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	2107      	movs	r1, #7
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f7ff fe4f 	bl	800084c <GPIO_u8SetPinValue>
    //HAL_Delay(2);
    SysTick_delay_ms(2);
 8000bae:	2002      	movs	r0, #2
 8000bb0:	f000 fb94 	bl	80012dc <SysTick_delay_ms>
    /******** SET EN PIN LOW *********/
    //HAL_GPIO_WritePin(LCD_CPORT, LCD_EN_PIN, GPIO_PIN_RESET);
    GPIO_u8SetPinValue(LCD_CPORT, LCD_EN_PIN,PIN_LOW);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2107      	movs	r1, #7
 8000bb8:	2000      	movs	r0, #0
 8000bba:	f7ff fe47 	bl	800084c <GPIO_u8SetPinValue>
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <LCD_voidSendCommand>:

/************* LCD Command Send Function ************/
void LCD_voidSendCommand(uint8_t copy_u8command) {
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b082      	sub	sp, #8
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	4603      	mov	r3, r0
 8000bca:	71fb      	strb	r3, [r7, #7]
    /* Clear RS PIN to Send Command */
	//HAL_GPIO_WritePin(LCD_CPORT, LCD_RS_PIN,GPIO_PIN_RESET);
	GPIO_u8SetPinValue(LCD_CPORT, LCD_RS_PIN,PIN_LOW);
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2105      	movs	r1, #5
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f7ff fe3b 	bl	800084c <GPIO_u8SetPinValue>
    /* Clear RW PIN to Send Data */
	//HAL_GPIO_WritePin(LCD_CPORT, LCD_RW_PIN,GPIO_PIN_RESET);
	GPIO_u8SetPinValue(LCD_CPORT,LCD_RW_PIN,PIN_LOW);
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	2106      	movs	r1, #6
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f7ff fe36 	bl	800084c <GPIO_u8SetPinValue>


    LCD_voidSendLowerNibble(copy_u8command >> 4);
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	091b      	lsrs	r3, r3, #4
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ffa8 	bl	8000b3c <LCD_voidSendLowerNibble>
    LCD_voidSetEnable();
 8000bec:	f7ff ffd8 	bl	8000ba0 <LCD_voidSetEnable>
    LCD_voidSendLowerNibble(copy_u8command);
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ffa2 	bl	8000b3c <LCD_voidSendLowerNibble>
    LCD_voidSetEnable();
 8000bf8:	f7ff ffd2 	bl	8000ba0 <LCD_voidSetEnable>

}
 8000bfc:	bf00      	nop
 8000bfe:	3708      	adds	r7, #8
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <LCD_voidSendData>:

/************* LCD Data Send Function ************/
void LCD_voidSendData(uint8_t copy_u8data) {
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
    /* SET RS PIN to Send Data */
	//HAL_GPIO_WritePin(LCD_CPORT, LCD_RS_PIN, GPIO_PIN_SET);
	GPIO_u8SetPinValue(LCD_CPORT, LCD_RS_PIN,PIN_HIGH);
 8000c0e:	2201      	movs	r2, #1
 8000c10:	2105      	movs	r1, #5
 8000c12:	2000      	movs	r0, #0
 8000c14:	f7ff fe1a 	bl	800084c <GPIO_u8SetPinValue>

    /* Clear RW PIN to Send Data */
	//HAL_GPIO_WritePin(LCD_CPORT, LCD_RW_PIN, GPIO_PIN_RESET);
	GPIO_u8SetPinValue(LCD_CPORT,LCD_RW_PIN,PIN_LOW);
 8000c18:	2200      	movs	r2, #0
 8000c1a:	2106      	movs	r1, #6
 8000c1c:	2000      	movs	r0, #0
 8000c1e:	f7ff fe15 	bl	800084c <GPIO_u8SetPinValue>
    /*** Send Data ***/

    LCD_voidSendLowerNibble(copy_u8data >> 4);
 8000c22:	79fb      	ldrb	r3, [r7, #7]
 8000c24:	091b      	lsrs	r3, r3, #4
 8000c26:	b2db      	uxtb	r3, r3
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff ff87 	bl	8000b3c <LCD_voidSendLowerNibble>
    LCD_voidSetEnable();
 8000c2e:	f7ff ffb7 	bl	8000ba0 <LCD_voidSetEnable>
    LCD_voidSendLowerNibble(copy_u8data);
 8000c32:	79fb      	ldrb	r3, [r7, #7]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff81 	bl	8000b3c <LCD_voidSendLowerNibble>
    LCD_voidSetEnable();
 8000c3a:	f7ff ffb1 	bl	8000ba0 <LCD_voidSetEnable>

}
 8000c3e:	bf00      	nop
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <LCD_voidInit>:

/************* LCD Initialization Function 8-bit Mode ************/
void LCD_voidInit(void) {
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0
	//HAL_Delay(40);
	SysTick_delay_ms(150);
 8000c4a:	2096      	movs	r0, #150	; 0x96
 8000c4c:	f000 fb46 	bl	80012dc <SysTick_delay_ms>
    /* Send Function Set */

    LCD_voidSendLowerNibble(0b0010);
 8000c50:	2002      	movs	r0, #2
 8000c52:	f7ff ff73 	bl	8000b3c <LCD_voidSendLowerNibble>
    LCD_voidSetEnable();
 8000c56:	f7ff ffa3 	bl	8000ba0 <LCD_voidSetEnable>
    LCD_voidSendLowerNibble(0b0010);
 8000c5a:	2002      	movs	r0, #2
 8000c5c:	f7ff ff6e 	bl	8000b3c <LCD_voidSendLowerNibble>
    LCD_voidSetEnable();
 8000c60:	f7ff ff9e 	bl	8000ba0 <LCD_voidSetEnable>
    LCD_voidSendLowerNibble(0b1000);
 8000c64:	2008      	movs	r0, #8
 8000c66:	f7ff ff69 	bl	8000b3c <LCD_voidSendLowerNibble>
    LCD_voidSetEnable();
 8000c6a:	f7ff ff99 	bl	8000ba0 <LCD_voidSetEnable>

    /* Display on/off control */
    LCD_voidSendCommand(0b00001100);
 8000c6e:	200c      	movs	r0, #12
 8000c70:	f7ff ffa7 	bl	8000bc2 <LCD_voidSendCommand>
    /* Display Clear */
    LCD_voidSendCommand(1);
 8000c74:	2001      	movs	r0, #1
 8000c76:	f7ff ffa4 	bl	8000bc2 <LCD_voidSendCommand>
    /* Entry Mode Set */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}

08000c7e <LCD_voidSendString>:

/************* LCD String Display Function ************/
void LCD_voidSendString(uint8_t *copy_u8data) {
 8000c7e:	b580      	push	{r7, lr}
 8000c80:	b084      	sub	sp, #16
 8000c82:	af00      	add	r7, sp, #0
 8000c84:	6078      	str	r0, [r7, #4]
	uint8_t i = 0;
 8000c86:	2300      	movs	r3, #0
 8000c88:	73fb      	strb	r3, [r7, #15]
    while (copy_u8data[i] != '\0') {
 8000c8a:	e009      	b.n	8000ca0 <LCD_voidSendString+0x22>
        LCD_voidSendData(copy_u8data[i]);
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	687a      	ldr	r2, [r7, #4]
 8000c90:	4413      	add	r3, r2
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4618      	mov	r0, r3
 8000c96:	f7ff ffb5 	bl	8000c04 <LCD_voidSendData>
        copy_u8data++;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	3301      	adds	r3, #1
 8000c9e:	607b      	str	r3, [r7, #4]
    while (copy_u8data[i] != '\0') {
 8000ca0:	7bfb      	ldrb	r3, [r7, #15]
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	4413      	add	r3, r2
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d1ef      	bne.n	8000c8c <LCD_voidSendString+0xe>
    }
}
 8000cac:	bf00      	nop
 8000cae:	bf00      	nop
 8000cb0:	3710      	adds	r7, #16
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <LCD_SetGridPos>:

/********** Function to Set Grid position on LCD ****/
void LCD_SetGridPos(uint8_t copy_u8column,uint8_t copy_u8row) {
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b084      	sub	sp, #16
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	460a      	mov	r2, r1
 8000cc0:	71fb      	strb	r3, [r7, #7]
 8000cc2:	4613      	mov	r3, r2
 8000cc4:	71bb      	strb	r3, [r7, #6]
	    uint8_t address = 0x0;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	73fb      	strb	r3, [r7, #15]
	    if (copy_u8row == 0) {
 8000cca:	79bb      	ldrb	r3, [r7, #6]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d102      	bne.n	8000cd6 <LCD_SetGridPos+0x20>
	        address = 0x80;
 8000cd0:	2380      	movs	r3, #128	; 0x80
 8000cd2:	73fb      	strb	r3, [r7, #15]
 8000cd4:	e004      	b.n	8000ce0 <LCD_SetGridPos+0x2a>
	    } else if (copy_u8row == 1) {
 8000cd6:	79bb      	ldrb	r3, [r7, #6]
 8000cd8:	2b01      	cmp	r3, #1
 8000cda:	d101      	bne.n	8000ce0 <LCD_SetGridPos+0x2a>
	        address = 0xC0;
 8000cdc:	23c0      	movs	r3, #192	; 0xc0
 8000cde:	73fb      	strb	r3, [r7, #15]
	    }
	    if (copy_u8column < 16) {
 8000ce0:	79fb      	ldrb	r3, [r7, #7]
 8000ce2:	2b0f      	cmp	r3, #15
 8000ce4:	d803      	bhi.n	8000cee <LCD_SetGridPos+0x38>
	        address += copy_u8column;
 8000ce6:	7bfa      	ldrb	r2, [r7, #15]
 8000ce8:	79fb      	ldrb	r3, [r7, #7]
 8000cea:	4413      	add	r3, r2
 8000cec:	73fb      	strb	r3, [r7, #15]
	    }
	    LCD_voidSendCommand(address);
 8000cee:	7bfb      	ldrb	r3, [r7, #15]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f7ff ff66 	bl	8000bc2 <LCD_voidSendCommand>
}
 8000cf6:	bf00      	nop
 8000cf8:	3710      	adds	r7, #16
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <LCD_voidSendNum>:

/************* LCD Number Display Function ************/
void LCD_voidSendNum(float copy_f32data) {
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b08c      	sub	sp, #48	; 0x30
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	ed87 0a01 	vstr	s0, [r7, #4]
    uint8_t buffer[16];  // Buffer to hold the string representation of the number
    uint8_t i = 0;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    // Check if the number is negative
    if (copy_f32data < 0) {
 8000d10:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d14:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d1c:	d508      	bpl.n	8000d30 <LCD_voidSendNum+0x30>
        LCD_voidSendData('-');  // Send negative sign to LCD
 8000d1e:	202d      	movs	r0, #45	; 0x2d
 8000d20:	f7ff ff70 	bl	8000c04 <LCD_voidSendData>
        copy_f32data = -copy_f32data;  // Make the number positive
 8000d24:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d28:	eef1 7a67 	vneg.f32	s15, s15
 8000d2c:	edc7 7a01 	vstr	s15, [r7, #4]
    }

    // Check if the number is a floating-point number or integer
    if (copy_f32data == (int)copy_f32data) {
 8000d30:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d3c:	ed97 7a01 	vldr	s14, [r7, #4]
 8000d40:	eeb4 7a67 	vcmp.f32	s14, s15
 8000d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d48:	d14b      	bne.n	8000de2 <LCD_voidSendNum+0xe2>
        // If the number is an integer, print as an integer
        uint16_t int_part = (uint16_t)copy_f32data;
 8000d4a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d52:	ee17 3a90 	vmov	r3, s15
 8000d56:	85bb      	strh	r3, [r7, #44]	; 0x2c
        if (int_part == 0) {
 8000d58:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d12a      	bne.n	8000db4 <LCD_voidSendNum+0xb4>
            buffer[i++] = '0';
 8000d5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d62:	1c5a      	adds	r2, r3, #1
 8000d64:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8000d68:	3330      	adds	r3, #48	; 0x30
 8000d6a:	443b      	add	r3, r7
 8000d6c:	2230      	movs	r2, #48	; 0x30
 8000d6e:	f803 2c28 	strb.w	r2, [r3, #-40]
 8000d72:	e031      	b.n	8000dd8 <LCD_voidSendNum+0xd8>
        } else {
            // Convert integer part to string manually (reverse the digits)
            while (int_part != 0) {
                uint8_t digit = int_part % 10;  // Extract the least significant digit
 8000d74:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8000d76:	4bb0      	ldr	r3, [pc, #704]	; (8001038 <LCD_voidSendNum+0x338>)
 8000d78:	fba3 1302 	umull	r1, r3, r3, r2
 8000d7c:	08d9      	lsrs	r1, r3, #3
 8000d7e:	460b      	mov	r3, r1
 8000d80:	009b      	lsls	r3, r3, #2
 8000d82:	440b      	add	r3, r1
 8000d84:	005b      	lsls	r3, r3, #1
 8000d86:	1ad3      	subs	r3, r2, r3
 8000d88:	b29b      	uxth	r3, r3
 8000d8a:	76fb      	strb	r3, [r7, #27]
                buffer[i++] = digit + '0';  // Convert digit to ASCII and store in buffer
 8000d8c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d90:	1c5a      	adds	r2, r3, #1
 8000d92:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8000d96:	4619      	mov	r1, r3
 8000d98:	7efb      	ldrb	r3, [r7, #27]
 8000d9a:	3330      	adds	r3, #48	; 0x30
 8000d9c:	b2da      	uxtb	r2, r3
 8000d9e:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8000da2:	443b      	add	r3, r7
 8000da4:	f803 2c28 	strb.w	r2, [r3, #-40]
                int_part /= 10;  // Move to the next digit
 8000da8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000daa:	4aa3      	ldr	r2, [pc, #652]	; (8001038 <LCD_voidSendNum+0x338>)
 8000dac:	fba2 2303 	umull	r2, r3, r2, r3
 8000db0:	08db      	lsrs	r3, r3, #3
 8000db2:	85bb      	strh	r3, [r7, #44]	; 0x2c
            while (int_part != 0) {
 8000db4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d1dc      	bne.n	8000d74 <LCD_voidSendNum+0x74>
            }
        }
        // Send digits to LCD in reverse order
        while (i > 0) {
 8000dba:	e00d      	b.n	8000dd8 <LCD_voidSendNum+0xd8>
            LCD_voidSendData(buffer[--i]);
 8000dbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dc0:	3b01      	subs	r3, #1
 8000dc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000dc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000dca:	3330      	adds	r3, #48	; 0x30
 8000dcc:	443b      	add	r3, r7
 8000dce:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f7ff ff16 	bl	8000c04 <LCD_voidSendData>
        while (i > 0) {
 8000dd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d1ed      	bne.n	8000dbc <LCD_voidSendNum+0xbc>
        // Send fractional digits to LCD
        for (uint8_t j = 0; j < i; j++) {
            LCD_voidSendData(buffer[j]);
        }
    }
}
 8000de0:	e126      	b.n	8001030 <LCD_voidSendNum+0x330>
        uint16_t int_part = (uint16_t)copy_f32data;  // Extract integer part
 8000de2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000de6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dea:	ee17 3a90 	vmov	r3, s15
 8000dee:	857b      	strh	r3, [r7, #42]	; 0x2a
        float fractional_part = copy_f32data - int_part;  // Extract fractional part
 8000df0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000df2:	ee07 3a90 	vmov	s15, r3
 8000df6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000dfa:	ed97 7a01 	vldr	s14, [r7, #4]
 8000dfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000e02:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        if (int_part == 0) {
 8000e06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d12c      	bne.n	8000e66 <LCD_voidSendNum+0x166>
            buffer[i++] = '0';
 8000e0c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e10:	1c5a      	adds	r2, r3, #1
 8000e12:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8000e16:	3330      	adds	r3, #48	; 0x30
 8000e18:	443b      	add	r3, r7
 8000e1a:	2230      	movs	r2, #48	; 0x30
 8000e1c:	f803 2c28 	strb.w	r2, [r3, #-40]
 8000e20:	e033      	b.n	8000e8a <LCD_voidSendNum+0x18a>
                uint8_t digit = int_part % 10;
 8000e22:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8000e24:	4b84      	ldr	r3, [pc, #528]	; (8001038 <LCD_voidSendNum+0x338>)
 8000e26:	fba3 1302 	umull	r1, r3, r3, r2
 8000e2a:	08d9      	lsrs	r1, r3, #3
 8000e2c:	460b      	mov	r3, r1
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	440b      	add	r3, r1
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	b29b      	uxth	r3, r3
 8000e38:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                buffer[i++] = digit + '0';
 8000e3c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e40:	1c5a      	adds	r2, r3, #1
 8000e42:	f887 202f 	strb.w	r2, [r7, #47]	; 0x2f
 8000e46:	4619      	mov	r1, r3
 8000e48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000e4c:	3330      	adds	r3, #48	; 0x30
 8000e4e:	b2da      	uxtb	r2, r3
 8000e50:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8000e54:	443b      	add	r3, r7
 8000e56:	f803 2c28 	strb.w	r2, [r3, #-40]
                int_part /= 10;
 8000e5a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e5c:	4a76      	ldr	r2, [pc, #472]	; (8001038 <LCD_voidSendNum+0x338>)
 8000e5e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e62:	08db      	lsrs	r3, r3, #3
 8000e64:	857b      	strh	r3, [r7, #42]	; 0x2a
            while (int_part != 0) {
 8000e66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d1da      	bne.n	8000e22 <LCD_voidSendNum+0x122>
        while (i > 0) {
 8000e6c:	e00d      	b.n	8000e8a <LCD_voidSendNum+0x18a>
            LCD_voidSendData(buffer[--i]);
 8000e6e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e72:	3b01      	subs	r3, #1
 8000e74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000e78:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e7c:	3330      	adds	r3, #48	; 0x30
 8000e7e:	443b      	add	r3, r7
 8000e80:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8000e84:	4618      	mov	r0, r3
 8000e86:	f7ff febd 	bl	8000c04 <LCD_voidSendData>
        while (i > 0) {
 8000e8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d1ed      	bne.n	8000e6e <LCD_voidSendNum+0x16e>
        LCD_voidSendData('.');
 8000e92:	202e      	movs	r0, #46	; 0x2e
 8000e94:	f7ff feb6 	bl	8000c04 <LCD_voidSendData>
        fractional_part *= 1000000;
 8000e98:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8000e9c:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800103c <LCD_voidSendNum+0x33c>
 8000ea0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000ea4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        uint32_t fraction_as_int = (uint32_t)(fractional_part + 0.5);  // Round to nearest integer
 8000ea8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000eaa:	f7ff fb0f 	bl	80004cc <__aeabi_f2d>
 8000eae:	f04f 0200 	mov.w	r2, #0
 8000eb2:	4b63      	ldr	r3, [pc, #396]	; (8001040 <LCD_voidSendNum+0x340>)
 8000eb4:	f7ff f9ac 	bl	8000210 <__adddf3>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	460b      	mov	r3, r1
 8000ebc:	4610      	mov	r0, r2
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	f7ff fb5c 	bl	800057c <__aeabi_d2uiz>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	61fb      	str	r3, [r7, #28]
        i = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        buffer[i++] = (fraction_as_int / 100000) % 10 + '0';  // Hundred-thousands place
 8000ece:	69fb      	ldr	r3, [r7, #28]
 8000ed0:	095b      	lsrs	r3, r3, #5
 8000ed2:	4a5c      	ldr	r2, [pc, #368]	; (8001044 <LCD_voidSendNum+0x344>)
 8000ed4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ed8:	09d9      	lsrs	r1, r3, #7
 8000eda:	4b57      	ldr	r3, [pc, #348]	; (8001038 <LCD_voidSendNum+0x338>)
 8000edc:	fba3 2301 	umull	r2, r3, r3, r1
 8000ee0:	08da      	lsrs	r2, r3, #3
 8000ee2:	4613      	mov	r3, r2
 8000ee4:	009b      	lsls	r3, r3, #2
 8000ee6:	4413      	add	r3, r2
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	1aca      	subs	r2, r1, r3
 8000eec:	b2d2      	uxtb	r2, r2
 8000eee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ef2:	1c59      	adds	r1, r3, #1
 8000ef4:	f887 102f 	strb.w	r1, [r7, #47]	; 0x2f
 8000ef8:	3230      	adds	r2, #48	; 0x30
 8000efa:	b2d2      	uxtb	r2, r2
 8000efc:	3330      	adds	r3, #48	; 0x30
 8000efe:	443b      	add	r3, r7
 8000f00:	f803 2c28 	strb.w	r2, [r3, #-40]
        buffer[i++] = (fraction_as_int / 10000) % 10 + '0';   // Ten-thousands place
 8000f04:	69fb      	ldr	r3, [r7, #28]
 8000f06:	4a50      	ldr	r2, [pc, #320]	; (8001048 <LCD_voidSendNum+0x348>)
 8000f08:	fba2 2303 	umull	r2, r3, r2, r3
 8000f0c:	0b59      	lsrs	r1, r3, #13
 8000f0e:	4b4a      	ldr	r3, [pc, #296]	; (8001038 <LCD_voidSendNum+0x338>)
 8000f10:	fba3 2301 	umull	r2, r3, r3, r1
 8000f14:	08da      	lsrs	r2, r3, #3
 8000f16:	4613      	mov	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	005b      	lsls	r3, r3, #1
 8000f1e:	1aca      	subs	r2, r1, r3
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f26:	1c59      	adds	r1, r3, #1
 8000f28:	f887 102f 	strb.w	r1, [r7, #47]	; 0x2f
 8000f2c:	3230      	adds	r2, #48	; 0x30
 8000f2e:	b2d2      	uxtb	r2, r2
 8000f30:	3330      	adds	r3, #48	; 0x30
 8000f32:	443b      	add	r3, r7
 8000f34:	f803 2c28 	strb.w	r2, [r3, #-40]
        buffer[i++] = (fraction_as_int / 1000) % 10 + '0';    // Thousands place
 8000f38:	69fb      	ldr	r3, [r7, #28]
 8000f3a:	4a44      	ldr	r2, [pc, #272]	; (800104c <LCD_voidSendNum+0x34c>)
 8000f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f40:	0999      	lsrs	r1, r3, #6
 8000f42:	4b3d      	ldr	r3, [pc, #244]	; (8001038 <LCD_voidSendNum+0x338>)
 8000f44:	fba3 2301 	umull	r2, r3, r3, r1
 8000f48:	08da      	lsrs	r2, r3, #3
 8000f4a:	4613      	mov	r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	005b      	lsls	r3, r3, #1
 8000f52:	1aca      	subs	r2, r1, r3
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f5a:	1c59      	adds	r1, r3, #1
 8000f5c:	f887 102f 	strb.w	r1, [r7, #47]	; 0x2f
 8000f60:	3230      	adds	r2, #48	; 0x30
 8000f62:	b2d2      	uxtb	r2, r2
 8000f64:	3330      	adds	r3, #48	; 0x30
 8000f66:	443b      	add	r3, r7
 8000f68:	f803 2c28 	strb.w	r2, [r3, #-40]
        buffer[i++] = (fraction_as_int / 100) % 10 + '0';     // Hundreds place
 8000f6c:	69fb      	ldr	r3, [r7, #28]
 8000f6e:	4a38      	ldr	r2, [pc, #224]	; (8001050 <LCD_voidSendNum+0x350>)
 8000f70:	fba2 2303 	umull	r2, r3, r2, r3
 8000f74:	0959      	lsrs	r1, r3, #5
 8000f76:	4b30      	ldr	r3, [pc, #192]	; (8001038 <LCD_voidSendNum+0x338>)
 8000f78:	fba3 2301 	umull	r2, r3, r3, r1
 8000f7c:	08da      	lsrs	r2, r3, #3
 8000f7e:	4613      	mov	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	4413      	add	r3, r2
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	1aca      	subs	r2, r1, r3
 8000f88:	b2d2      	uxtb	r2, r2
 8000f8a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f8e:	1c59      	adds	r1, r3, #1
 8000f90:	f887 102f 	strb.w	r1, [r7, #47]	; 0x2f
 8000f94:	3230      	adds	r2, #48	; 0x30
 8000f96:	b2d2      	uxtb	r2, r2
 8000f98:	3330      	adds	r3, #48	; 0x30
 8000f9a:	443b      	add	r3, r7
 8000f9c:	f803 2c28 	strb.w	r2, [r3, #-40]
        buffer[i++] = (fraction_as_int / 10) % 10 + '0';      // Tens place
 8000fa0:	69fb      	ldr	r3, [r7, #28]
 8000fa2:	4a25      	ldr	r2, [pc, #148]	; (8001038 <LCD_voidSendNum+0x338>)
 8000fa4:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa8:	08d9      	lsrs	r1, r3, #3
 8000faa:	4b23      	ldr	r3, [pc, #140]	; (8001038 <LCD_voidSendNum+0x338>)
 8000fac:	fba3 2301 	umull	r2, r3, r3, r1
 8000fb0:	08da      	lsrs	r2, r3, #3
 8000fb2:	4613      	mov	r3, r2
 8000fb4:	009b      	lsls	r3, r3, #2
 8000fb6:	4413      	add	r3, r2
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	1aca      	subs	r2, r1, r3
 8000fbc:	b2d2      	uxtb	r2, r2
 8000fbe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fc2:	1c59      	adds	r1, r3, #1
 8000fc4:	f887 102f 	strb.w	r1, [r7, #47]	; 0x2f
 8000fc8:	3230      	adds	r2, #48	; 0x30
 8000fca:	b2d2      	uxtb	r2, r2
 8000fcc:	3330      	adds	r3, #48	; 0x30
 8000fce:	443b      	add	r3, r7
 8000fd0:	f803 2c28 	strb.w	r2, [r3, #-40]
        buffer[i++] = (fraction_as_int % 10) + '0';           // Ones place
 8000fd4:	69f9      	ldr	r1, [r7, #28]
 8000fd6:	4b18      	ldr	r3, [pc, #96]	; (8001038 <LCD_voidSendNum+0x338>)
 8000fd8:	fba3 2301 	umull	r2, r3, r3, r1
 8000fdc:	08da      	lsrs	r2, r3, #3
 8000fde:	4613      	mov	r3, r2
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	1aca      	subs	r2, r1, r3
 8000fe8:	b2d2      	uxtb	r2, r2
 8000fea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fee:	1c59      	adds	r1, r3, #1
 8000ff0:	f887 102f 	strb.w	r1, [r7, #47]	; 0x2f
 8000ff4:	3230      	adds	r2, #48	; 0x30
 8000ff6:	b2d2      	uxtb	r2, r2
 8000ff8:	3330      	adds	r3, #48	; 0x30
 8000ffa:	443b      	add	r3, r7
 8000ffc:	f803 2c28 	strb.w	r2, [r3, #-40]
        for (uint8_t j = 0; j < i; j++) {
 8001000:	2300      	movs	r3, #0
 8001002:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001006:	e00d      	b.n	8001024 <LCD_voidSendNum+0x324>
            LCD_voidSendData(buffer[j]);
 8001008:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800100c:	3330      	adds	r3, #48	; 0x30
 800100e:	443b      	add	r3, r7
 8001010:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001014:	4618      	mov	r0, r3
 8001016:	f7ff fdf5 	bl	8000c04 <LCD_voidSendData>
        for (uint8_t j = 0; j < i; j++) {
 800101a:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 800101e:	3301      	adds	r3, #1
 8001020:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
 8001024:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001028:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800102c:	429a      	cmp	r2, r3
 800102e:	d3eb      	bcc.n	8001008 <LCD_voidSendNum+0x308>
}
 8001030:	bf00      	nop
 8001032:	3730      	adds	r7, #48	; 0x30
 8001034:	46bd      	mov	sp, r7
 8001036:	bd80      	pop	{r7, pc}
 8001038:	cccccccd 	.word	0xcccccccd
 800103c:	49742400 	.word	0x49742400
 8001040:	3fe00000 	.word	0x3fe00000
 8001044:	0a7c5ac5 	.word	0x0a7c5ac5
 8001048:	d1b71759 	.word	0xd1b71759
 800104c:	10624dd3 	.word	0x10624dd3
 8001050:	51eb851f 	.word	0x51eb851f

08001054 <RCC_SetClkStatus>:
 *
 * @param Clk_Type The type of clock to set (HSI, HSE, PLL, etc.).
 * @param Status The status to set for the clock (ON, OFF).
 * @return uint8_t Returns 0 on success, 1 if the clock type is invalid.
 */
uint8_t RCC_SetClkStatus(CLK_t Clk_Type, STATUS_t Status) {
 8001054:	b480      	push	{r7}
 8001056:	b083      	sub	sp, #12
 8001058:	af00      	add	r7, sp, #0
 800105a:	4603      	mov	r3, r0
 800105c:	460a      	mov	r2, r1
 800105e:	71fb      	strb	r3, [r7, #7]
 8001060:	4613      	mov	r3, r2
 8001062:	71bb      	strb	r3, [r7, #6]
    // Check if the clock type is within a valid range (HSI, HSE, PLL, etc.)



    // Set or clear the appropriate bit in the RCC->CR register based on Status
    if (Status == ON) {
 8001064:	79bb      	ldrb	r3, [r7, #6]
 8001066:	2b01      	cmp	r3, #1
 8001068:	d10a      	bne.n	8001080 <RCC_SetClkStatus+0x2c>
        RCC->CR |= (1 << Clk_Type);  // Enable the specified clock
 800106a:	4b14      	ldr	r3, [pc, #80]	; (80010bc <RCC_SetClkStatus+0x68>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	79fa      	ldrb	r2, [r7, #7]
 8001070:	2101      	movs	r1, #1
 8001072:	fa01 f202 	lsl.w	r2, r1, r2
 8001076:	4611      	mov	r1, r2
 8001078:	4a10      	ldr	r2, [pc, #64]	; (80010bc <RCC_SetClkStatus+0x68>)
 800107a:	430b      	orrs	r3, r1
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	e00a      	b.n	8001096 <RCC_SetClkStatus+0x42>
    } else {
        RCC->CR &= ~(1 << Clk_Type); // Disable the specified clock
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <RCC_SetClkStatus+0x68>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	79fa      	ldrb	r2, [r7, #7]
 8001086:	2101      	movs	r1, #1
 8001088:	fa01 f202 	lsl.w	r2, r1, r2
 800108c:	43d2      	mvns	r2, r2
 800108e:	4611      	mov	r1, r2
 8001090:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <RCC_SetClkStatus+0x68>)
 8001092:	400b      	ands	r3, r1
 8001094:	6013      	str	r3, [r2, #0]
    }

    // Wait for the clock to be ready (bit is set in RCC->CR register)
    while (((RCC->CR >> (Clk_Type + 1)) & 1) == 0);
 8001096:	bf00      	nop
 8001098:	4b08      	ldr	r3, [pc, #32]	; (80010bc <RCC_SetClkStatus+0x68>)
 800109a:	681a      	ldr	r2, [r3, #0]
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	3301      	adds	r3, #1
 80010a0:	fa22 f303 	lsr.w	r3, r2, r3
 80010a4:	f003 0301 	and.w	r3, r3, #1
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d0f5      	beq.n	8001098 <RCC_SetClkStatus+0x44>

    return 0;  // Success
 80010ac:	2300      	movs	r3, #0
}
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800

080010c0 <RCC_SetSysClk>:
 * This function selects the clock source for the system clock (HSI, HSE, or PLL).
 *
 * @param SYSClkType The type of clock source to use (HSI, HSE, PLL).
 * @return uint8_t Returns 0 on success, 1 if the clock source is invalid.
 */
uint8_t RCC_SetSysClk(SYS_CLK_t SYSClkType) {
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	4603      	mov	r3, r0
 80010c8:	71fb      	strb	r3, [r7, #7]
    // Check if the system clock source is valid
    if (SYSClkType > SYSPLLP) {
 80010ca:	79fb      	ldrb	r3, [r7, #7]
 80010cc:	2b02      	cmp	r3, #2
 80010ce:	d901      	bls.n	80010d4 <RCC_SetSysClk+0x14>
        return 1;  // Return error for invalid system clock type
 80010d0:	2301      	movs	r3, #1
 80010d2:	e015      	b.n	8001100 <RCC_SetSysClk+0x40>
    }

    // Clear the current system clock selection bits (SW[1:0] in CFGR)
    RCC->CFGR &= ~(0b11 << 0);
 80010d4:	4b0d      	ldr	r3, [pc, #52]	; (800110c <RCC_SetSysClk+0x4c>)
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	4a0c      	ldr	r2, [pc, #48]	; (800110c <RCC_SetSysClk+0x4c>)
 80010da:	f023 0303 	bic.w	r3, r3, #3
 80010de:	6093      	str	r3, [r2, #8]

    // Set the new system clock source (SYSClkType shifted into position)
    RCC->CFGR |= (SYSClkType << 0);
 80010e0:	4b0a      	ldr	r3, [pc, #40]	; (800110c <RCC_SetSysClk+0x4c>)
 80010e2:	689a      	ldr	r2, [r3, #8]
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	4909      	ldr	r1, [pc, #36]	; (800110c <RCC_SetSysClk+0x4c>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	608b      	str	r3, [r1, #8]

    // Wait for the system clock to be switched and confirmed (SWS[1:0] bits)
    while (((RCC->CFGR >> 2) & 0b11) != SYSClkType);
 80010ec:	bf00      	nop
 80010ee:	4b07      	ldr	r3, [pc, #28]	; (800110c <RCC_SetSysClk+0x4c>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	f003 0203 	and.w	r2, r3, #3
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d1f7      	bne.n	80010ee <RCC_SetSysClk+0x2e>

    return 0;  // Success
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	40023800 	.word	0x40023800

08001110 <RCC_HSE_Mode>:
 * This function sets the HSE clock mode by modifying the HSEBYP bit in the RCC_CR register.
 *
 * @param HSE_MODE HSE mode to be configured, defined by the HSE_t enum.
 * @return uint8_t Returns 0 if the mode is set successfully, 1 for an invalid input.
 */
uint8_t RCC_HSE_Mode(HSE_t HSE_MODE) {
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	71fb      	strb	r3, [r7, #7]
    if (HSE_MODE == BYPASSED) {
 800111a:	79fb      	ldrb	r3, [r7, #7]
 800111c:	2b01      	cmp	r3, #1
 800111e:	d107      	bne.n	8001130 <RCC_HSE_Mode+0x20>
        RCC->CR |= (1 << 18);  // Set HSEBYP bit to bypass HSE with external clock signal
 8001120:	4b0c      	ldr	r3, [pc, #48]	; (8001154 <RCC_HSE_Mode+0x44>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <RCC_HSE_Mode+0x44>)
 8001126:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800112a:	6013      	str	r3, [r2, #0]
        return 0;             // Success
 800112c:	2300      	movs	r3, #0
 800112e:	e00b      	b.n	8001148 <RCC_HSE_Mode+0x38>
    } else if (HSE_MODE == NOT_BYPASSED) {
 8001130:	79fb      	ldrb	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d107      	bne.n	8001146 <RCC_HSE_Mode+0x36>
        RCC->CR &= ~(1 << 18); // Clear HSEBYP bit to use the HSE oscillator directly
 8001136:	4b07      	ldr	r3, [pc, #28]	; (8001154 <RCC_HSE_Mode+0x44>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a06      	ldr	r2, [pc, #24]	; (8001154 <RCC_HSE_Mode+0x44>)
 800113c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001140:	6013      	str	r3, [r2, #0]
        return 0;             // Success
 8001142:	2300      	movs	r3, #0
 8001144:	e000      	b.n	8001148 <RCC_HSE_Mode+0x38>
    } else {
        return 1;             // Invalid mode input
 8001146:	2301      	movs	r3, #1
    }
}
 8001148:	4618      	mov	r0, r3
 800114a:	370c      	adds	r7, #12
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	40023800 	.word	0x40023800

08001158 <RCC_PLL_Config>:
 *
 * @param PLL_Multiplexer The PLL multiplier value.
 * @param Src The clock source type for PLL (HSI or HSE).
 * @return uint8_t Returns 0 on success, 1 if an error occurs.
 */
uint8_t RCC_PLL_Config(uint32_t PLL_Multiplexer,uint8_t PLL_Division ,CLK_t Src) {
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	70fb      	strb	r3, [r7, #3]
 8001164:	4613      	mov	r3, r2
 8001166:	70bb      	strb	r3, [r7, #2]
	// Disable PLL by clearing the PLLON bit
	    RCC->CR &= ~(1 << 24);
 8001168:	4b4c      	ldr	r3, [pc, #304]	; (800129c <RCC_PLL_Config+0x144>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a4b      	ldr	r2, [pc, #300]	; (800129c <RCC_PLL_Config+0x144>)
 800116e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001172:	6013      	str	r3, [r2, #0]
	    while ((RCC->CR >> 25) & 1);  // Wait until PLLRDY bit is cleared
 8001174:	bf00      	nop
 8001176:	4b49      	ldr	r3, [pc, #292]	; (800129c <RCC_PLL_Config+0x144>)
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800117e:	2b00      	cmp	r3, #0
 8001180:	d1f9      	bne.n	8001176 <RCC_PLL_Config+0x1e>

	    // Select the clock source for PLL
	    if (Src == HSI) {
 8001182:	78bb      	ldrb	r3, [r7, #2]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d106      	bne.n	8001196 <RCC_PLL_Config+0x3e>
	        RCC->PLLCFGR &= ~(1 << 22); // HSI clock selected as PLL source
 8001188:	4b44      	ldr	r3, [pc, #272]	; (800129c <RCC_PLL_Config+0x144>)
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	4a43      	ldr	r2, [pc, #268]	; (800129c <RCC_PLL_Config+0x144>)
 800118e:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001192:	6053      	str	r3, [r2, #4]
 8001194:	e00b      	b.n	80011ae <RCC_PLL_Config+0x56>
	    } else if (Src == HSE) {
 8001196:	78bb      	ldrb	r3, [r7, #2]
 8001198:	2b10      	cmp	r3, #16
 800119a:	d106      	bne.n	80011aa <RCC_PLL_Config+0x52>
	        RCC->PLLCFGR |= (1 << 22);  // HSE oscillator clock selected as PLL source
 800119c:	4b3f      	ldr	r3, [pc, #252]	; (800129c <RCC_PLL_Config+0x144>)
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	4a3e      	ldr	r2, [pc, #248]	; (800129c <RCC_PLL_Config+0x144>)
 80011a2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80011a6:	6053      	str	r3, [r2, #4]
 80011a8:	e001      	b.n	80011ae <RCC_PLL_Config+0x56>
	    } else {
	        return 1;  // Invalid clock source
 80011aa:	2301      	movs	r3, #1
 80011ac:	e070      	b.n	8001290 <RCC_PLL_Config+0x138>
	    }

	    // Validate and set the PLL multiplier (PLLN)
	    if (PLL_Multiplexer < 50 || PLL_Multiplexer > 432) {
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b31      	cmp	r3, #49	; 0x31
 80011b2:	d903      	bls.n	80011bc <RCC_PLL_Config+0x64>
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f5b3 7fd8 	cmp.w	r3, #432	; 0x1b0
 80011ba:	d901      	bls.n	80011c0 <RCC_PLL_Config+0x68>
	        return 1;  // Invalid PLL multiplier value
 80011bc:	2301      	movs	r3, #1
 80011be:	e067      	b.n	8001290 <RCC_PLL_Config+0x138>
	    }

	    // Validate and set the PLL prescaler (PLLM)
	    if (PLL_Division < 2 || PLL_Division > 63) {
 80011c0:	78fb      	ldrb	r3, [r7, #3]
 80011c2:	2b01      	cmp	r3, #1
 80011c4:	d902      	bls.n	80011cc <RCC_PLL_Config+0x74>
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	2b3f      	cmp	r3, #63	; 0x3f
 80011ca:	d901      	bls.n	80011d0 <RCC_PLL_Config+0x78>
	        return 1;  // Invalid PLLM value
 80011cc:	2301      	movs	r3, #1
 80011ce:	e05f      	b.n	8001290 <RCC_PLL_Config+0x138>
	    }

	    // Clear PLLM and PLLN bits
	    RCC->PLLCFGR &= ~(0x3F << 0);  // Clear PLLM bits (PLLM[5:0])
 80011d0:	4b32      	ldr	r3, [pc, #200]	; (800129c <RCC_PLL_Config+0x144>)
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	4a31      	ldr	r2, [pc, #196]	; (800129c <RCC_PLL_Config+0x144>)
 80011d6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80011da:	6053      	str	r3, [r2, #4]
	    RCC->PLLCFGR &= ~(0x1FF << 6); // Clear PLLN bits (PLLN[8:0])
 80011dc:	4b2f      	ldr	r3, [pc, #188]	; (800129c <RCC_PLL_Config+0x144>)
 80011de:	685b      	ldr	r3, [r3, #4]
 80011e0:	4a2e      	ldr	r2, [pc, #184]	; (800129c <RCC_PLL_Config+0x144>)
 80011e2:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80011e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80011ea:	6053      	str	r3, [r2, #4]

	    // Set PLLM and PLLN to desired values
	    RCC->PLLCFGR |= (PLL_Division << 0);    // Set PLLM to desired value
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <RCC_PLL_Config+0x144>)
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	78fb      	ldrb	r3, [r7, #3]
 80011f2:	492a      	ldr	r1, [pc, #168]	; (800129c <RCC_PLL_Config+0x144>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	604b      	str	r3, [r1, #4]
	    RCC->PLLCFGR |= (PLL_Multiplexer << 6); // Set PLLN to desired value
 80011f8:	4b28      	ldr	r3, [pc, #160]	; (800129c <RCC_PLL_Config+0x144>)
 80011fa:	685a      	ldr	r2, [r3, #4]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	019b      	lsls	r3, r3, #6
 8001200:	4926      	ldr	r1, [pc, #152]	; (800129c <RCC_PLL_Config+0x144>)
 8001202:	4313      	orrs	r3, r2
 8001204:	604b      	str	r3, [r1, #4]

	    // Configure PLLP divider (PLLP[1:0]) for output clock
	    switch (PLL_Division) {
 8001206:	78fb      	ldrb	r3, [r7, #3]
 8001208:	3b02      	subs	r3, #2
 800120a:	2b06      	cmp	r3, #6
 800120c:	d830      	bhi.n	8001270 <RCC_PLL_Config+0x118>
 800120e:	a201      	add	r2, pc, #4	; (adr r2, 8001214 <RCC_PLL_Config+0xbc>)
 8001210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001214:	08001231 	.word	0x08001231
 8001218:	08001271 	.word	0x08001271
 800121c:	0800123f 	.word	0x0800123f
 8001220:	08001271 	.word	0x08001271
 8001224:	08001251 	.word	0x08001251
 8001228:	08001271 	.word	0x08001271
 800122c:	08001263 	.word	0x08001263
	        case 2:
	            RCC->PLLCFGR &= ~(0x3 << 16); // Clear PLLP and set it to 2
 8001230:	4b1a      	ldr	r3, [pc, #104]	; (800129c <RCC_PLL_Config+0x144>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	4a19      	ldr	r2, [pc, #100]	; (800129c <RCC_PLL_Config+0x144>)
 8001236:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800123a:	6053      	str	r3, [r2, #4]
	            break;
 800123c:	e01a      	b.n	8001274 <RCC_PLL_Config+0x11c>
	        case 4:
	            RCC->PLLCFGR = (RCC->PLLCFGR & ~(0x3 << 16)) | (1 << 16); // Set PLLP to 4
 800123e:	4b17      	ldr	r3, [pc, #92]	; (800129c <RCC_PLL_Config+0x144>)
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001246:	4a15      	ldr	r2, [pc, #84]	; (800129c <RCC_PLL_Config+0x144>)
 8001248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800124c:	6053      	str	r3, [r2, #4]
	            break;
 800124e:	e011      	b.n	8001274 <RCC_PLL_Config+0x11c>
	        case 6:
	            RCC->PLLCFGR = (RCC->PLLCFGR & ~(0x3 << 16)) | (2 << 16); // Set PLLP to 6
 8001250:	4b12      	ldr	r3, [pc, #72]	; (800129c <RCC_PLL_Config+0x144>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001258:	4a10      	ldr	r2, [pc, #64]	; (800129c <RCC_PLL_Config+0x144>)
 800125a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800125e:	6053      	str	r3, [r2, #4]
	            break;
 8001260:	e008      	b.n	8001274 <RCC_PLL_Config+0x11c>
	        case 8:
	            RCC->PLLCFGR = (RCC->PLLCFGR & ~(0x3 << 16)) | (3 << 16); // Set PLLP to 8
 8001262:	4b0e      	ldr	r3, [pc, #56]	; (800129c <RCC_PLL_Config+0x144>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	4a0d      	ldr	r2, [pc, #52]	; (800129c <RCC_PLL_Config+0x144>)
 8001268:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
 800126c:	6053      	str	r3, [r2, #4]
	            break;
 800126e:	e001      	b.n	8001274 <RCC_PLL_Config+0x11c>
	        default:
	            return 1;  // Invalid PLLP divider value
 8001270:	2301      	movs	r3, #1
 8001272:	e00d      	b.n	8001290 <RCC_PLL_Config+0x138>
	    }

	    // Enable PLL
	    RCC->CR |= (1 << 24);
 8001274:	4b09      	ldr	r3, [pc, #36]	; (800129c <RCC_PLL_Config+0x144>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	4a08      	ldr	r2, [pc, #32]	; (800129c <RCC_PLL_Config+0x144>)
 800127a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800127e:	6013      	str	r3, [r2, #0]
	    while (!((RCC->CR >> 25) & 1));  // Wait until PLLRDY bit is set
 8001280:	bf00      	nop
 8001282:	4b06      	ldr	r3, [pc, #24]	; (800129c <RCC_PLL_Config+0x144>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f9      	beq.n	8001282 <RCC_PLL_Config+0x12a>

	    return 0;  // Success
 800128e:	2300      	movs	r3, #0
}
 8001290:	4618      	mov	r0, r3
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	40023800 	.word	0x40023800

080012a0 <RCC_AHB1_EnableClk>:
 * @brief Enables the clock for a specific AHB1 peripheral.
 *
 * @param PeripheralName The peripheral to enable (e.g., GPIOAEN, GPIOBEN).
 * @return uint8_t Returns 0 on success, 1 if the peripheral name is invalid.
 */
uint8_t RCC_AHB1_EnableClk(RCC_AHB1_PERIPHERAL_t PeripheralName) {
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
    if (PeripheralName > 31) {
 80012aa:	79fb      	ldrb	r3, [r7, #7]
 80012ac:	2b1f      	cmp	r3, #31
 80012ae:	d901      	bls.n	80012b4 <RCC_AHB1_EnableClk+0x14>
        return 1;  // Return error if the peripheral name is out of range
 80012b0:	2301      	movs	r3, #1
 80012b2:	e00a      	b.n	80012ca <RCC_AHB1_EnableClk+0x2a>
    }

    RCC->AHB1ENR |= (1 << PeripheralName);  // Enable the peripheral clock
 80012b4:	4b08      	ldr	r3, [pc, #32]	; (80012d8 <RCC_AHB1_EnableClk+0x38>)
 80012b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b8:	79fa      	ldrb	r2, [r7, #7]
 80012ba:	2101      	movs	r1, #1
 80012bc:	fa01 f202 	lsl.w	r2, r1, r2
 80012c0:	4611      	mov	r1, r2
 80012c2:	4a05      	ldr	r2, [pc, #20]	; (80012d8 <RCC_AHB1_EnableClk+0x38>)
 80012c4:	430b      	orrs	r3, r1
 80012c6:	6313      	str	r3, [r2, #48]	; 0x30
    return 0;  // Success
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40023800 	.word	0x40023800

080012dc <SysTick_delay_ms>:
#define SYS_TICK_ENABLE             (1 << 0)  /*==>SysTick enable bit<==*/
#define SYS_TICK_COUNTFLAG          (1 << 16) /*==>SysTick count flag<==*/

#define SYS_TICK_MAX_TICKS           0xFFFFFF  // Maximum value for 24-bit SysTick reload register

uint8_t SysTick_delay_ms(uint16_t ms) {
 80012dc:	b480      	push	{r7}
 80012de:	b085      	sub	sp, #20
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	80fb      	strh	r3, [r7, #6]
	    /*Assuming F_CPU is 80MHz, but SysTick is running at F_CPU / 8 (10 MHz)*/
	    uint32_t ticks_per_ms = (F_CPU / 8) / 1000;  // Calculate ticks per millisecond
 80012e6:	f643 737a 	movw	r3, #16250	; 0x3f7a
 80012ea:	60bb      	str	r3, [r7, #8]
	    uint32_t total_ticks = ticks_per_ms * ms;
 80012ec:	88fa      	ldrh	r2, [r7, #6]
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	fb02 f303 	mul.w	r3, r2, r3
 80012f4:	60fb      	str	r3, [r7, #12]

	    /*Ensure SysTick is fully disabled before configuring*/
	    SysTick->CSR = 0;  // Disable SysTick to avoid conflicts
 80012f6:	4b1d      	ldr	r3, [pc, #116]	; (800136c <SysTick_delay_ms+0x90>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	601a      	str	r2, [r3, #0]

	    /*Check if delay exceeds the maximum reload value of SysTick*/
	    while (total_ticks > SYS_TICK_MAX_TICKS) {
 80012fc:	e014      	b.n	8001328 <SysTick_delay_ms+0x4c>


	    	/*Load max value into SysTick (subtract 1 as it's zero-indexed)*/
	        SysTick->RVR = SYS_TICK_MAX_TICKS - 1;
 80012fe:	4b1b      	ldr	r3, [pc, #108]	; (800136c <SysTick_delay_ms+0x90>)
 8001300:	4a1b      	ldr	r2, [pc, #108]	; (8001370 <SysTick_delay_ms+0x94>)
 8001302:	605a      	str	r2, [r3, #4]
	        /*Clear current value register*/
	        SysTick->CVR = 0;
 8001304:	4b19      	ldr	r3, [pc, #100]	; (800136c <SysTick_delay_ms+0x90>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
	        /*Enable SysTick timer*/
	        SysTick->CSR = SYS_TICK_CLKSOURCE_AHB_DIV8 | SYS_TICK_ENABLE;
 800130a:	4b18      	ldr	r3, [pc, #96]	; (800136c <SysTick_delay_ms+0x90>)
 800130c:	2205      	movs	r2, #5
 800130e:	601a      	str	r2, [r3, #0]

	         /* Wait for the COUNTFLAG to be set (indicating timer has finished)*/
	        while ((SysTick->CSR & SYS_TICK_COUNTFLAG) == 0);
 8001310:	bf00      	nop
 8001312:	4b16      	ldr	r3, [pc, #88]	; (800136c <SysTick_delay_ms+0x90>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0f9      	beq.n	8001312 <SysTick_delay_ms+0x36>

	        /* Subtract the max ticks from total ticks*/

	        total_ticks -= SYS_TICK_MAX_TICKS;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f103 437f 	add.w	r3, r3, #4278190080	; 0xff000000
 8001324:	3301      	adds	r3, #1
 8001326:	60fb      	str	r3, [r7, #12]
	    while (total_ticks > SYS_TICK_MAX_TICKS) {
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800132e:	d2e6      	bcs.n	80012fe <SysTick_delay_ms+0x22>
	    }

	    /*Handle the remaining ticks that fit within the SysTick range*/
	    if (total_ticks > 0) {
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d010      	beq.n	8001358 <SysTick_delay_ms+0x7c>
	        SysTick->RVR = total_ticks - 1;  // Load the remaining ticks
 8001336:	4a0d      	ldr	r2, [pc, #52]	; (800136c <SysTick_delay_ms+0x90>)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	3b01      	subs	r3, #1
 800133c:	6053      	str	r3, [r2, #4]
	        SysTick->CVR = 0;                // Clear current value register
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <SysTick_delay_ms+0x90>)
 8001340:	2200      	movs	r2, #0
 8001342:	609a      	str	r2, [r3, #8]
	        SysTick->CSR = SYS_TICK_CLKSOURCE_AHB_DIV8 | SYS_TICK_ENABLE;  // Enable SysTick timer
 8001344:	4b09      	ldr	r3, [pc, #36]	; (800136c <SysTick_delay_ms+0x90>)
 8001346:	2205      	movs	r2, #5
 8001348:	601a      	str	r2, [r3, #0]

	        /*Wait for the COUNTFLAG to be set*/
	        while ((SysTick->CSR & SYS_TICK_COUNTFLAG) == 0);
 800134a:	bf00      	nop
 800134c:	4b07      	ldr	r3, [pc, #28]	; (800136c <SysTick_delay_ms+0x90>)
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d0f9      	beq.n	800134c <SysTick_delay_ms+0x70>
	    }
	    /*Disable SysTick after the delay*/
	    SysTick->CSR = 0;
 8001358:	4b04      	ldr	r3, [pc, #16]	; (800136c <SysTick_delay_ms+0x90>)
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
	    return 0;  /*Success*/
 800135e:	2300      	movs	r3, #0
}
 8001360:	4618      	mov	r0, r3
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000e010 	.word	0xe000e010
 8001370:	00fffffe 	.word	0x00fffffe

08001374 <resetCalculator>:


/********* Function Definitions *********/

// Resets the calculator variables and LCD display
void resetCalculator() {
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
    num1 = 0;
 8001378:	4b0c      	ldr	r3, [pc, #48]	; (80013ac <resetCalculator+0x38>)
 800137a:	f04f 0200 	mov.w	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
    num2 = 0;
 8001380:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <resetCalculator+0x3c>)
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
    Loc_Sum = 0;
 8001388:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <resetCalculator+0x40>)
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
    operator = 0;
 8001390:	4b09      	ldr	r3, [pc, #36]	; (80013b8 <resetCalculator+0x44>)
 8001392:	2200      	movs	r2, #0
 8001394:	701a      	strb	r2, [r3, #0]
    isNum1Entered = 0;
 8001396:	4b09      	ldr	r3, [pc, #36]	; (80013bc <resetCalculator+0x48>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
    isOperatorEntered = 0;
 800139c:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <resetCalculator+0x4c>)
 800139e:	2200      	movs	r2, #0
 80013a0:	701a      	strb	r2, [r3, #0]
    LCD_voidSendCommand(0x01);  // Clear display
 80013a2:	2001      	movs	r0, #1
 80013a4:	f7ff fc0d 	bl	8000bc2 <LCD_voidSendCommand>
}
 80013a8:	bf00      	nop
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	200000bc 	.word	0x200000bc
 80013b0:	200000c0 	.word	0x200000c0
 80013b4:	200000c4 	.word	0x200000c4
 80013b8:	200000c8 	.word	0x200000c8
 80013bc:	200000c9 	.word	0x200000c9
 80013c0:	200000ca 	.word	0x200000ca

080013c4 <handleNumberInput>:

// Handles number input and stores it in the correct variable (num1 or num2)
void handleNumberInput(uint8_t key) {
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	4603      	mov	r3, r0
 80013cc:	71fb      	strb	r3, [r7, #7]
    if (!isOperatorEntered) {
 80013ce:	4b20      	ldr	r3, [pc, #128]	; (8001450 <handleNumberInput+0x8c>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d11c      	bne.n	8001410 <handleNumberInput+0x4c>
        num1 = (num1 * 10) + (key - '0');
 80013d6:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <handleNumberInput+0x90>)
 80013d8:	edd3 7a00 	vldr	s15, [r3]
 80013dc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80013e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80013e4:	79fb      	ldrb	r3, [r7, #7]
 80013e6:	3b30      	subs	r3, #48	; 0x30
 80013e8:	ee07 3a90 	vmov	s15, r3
 80013ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <handleNumberInput+0x90>)
 80013f6:	edc3 7a00 	vstr	s15, [r3]
        LCD_voidSendNum(key - '0');
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	3b30      	subs	r3, #48	; 0x30
 80013fe:	ee07 3a90 	vmov	s15, r3
 8001402:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001406:	eeb0 0a67 	vmov.f32	s0, s15
 800140a:	f7ff fc79 	bl	8000d00 <LCD_voidSendNum>
    } else {
        num2 = (num2 * 10) + (key - '0');
        LCD_voidSendNum(key - '0');
    }
}
 800140e:	e01b      	b.n	8001448 <handleNumberInput+0x84>
        num2 = (num2 * 10) + (key - '0');
 8001410:	4b11      	ldr	r3, [pc, #68]	; (8001458 <handleNumberInput+0x94>)
 8001412:	edd3 7a00 	vldr	s15, [r3]
 8001416:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800141a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	3b30      	subs	r3, #48	; 0x30
 8001422:	ee07 3a90 	vmov	s15, r3
 8001426:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800142a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800142e:	4b0a      	ldr	r3, [pc, #40]	; (8001458 <handleNumberInput+0x94>)
 8001430:	edc3 7a00 	vstr	s15, [r3]
        LCD_voidSendNum(key - '0');
 8001434:	79fb      	ldrb	r3, [r7, #7]
 8001436:	3b30      	subs	r3, #48	; 0x30
 8001438:	ee07 3a90 	vmov	s15, r3
 800143c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001440:	eeb0 0a67 	vmov.f32	s0, s15
 8001444:	f7ff fc5c 	bl	8000d00 <LCD_voidSendNum>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	200000ca 	.word	0x200000ca
 8001454:	200000bc 	.word	0x200000bc
 8001458:	200000c0 	.word	0x200000c0

0800145c <handleOperatorInput>:

// Handles operator input and sets the operator for calculation
void handleOperatorInput(uint8_t key) {
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	4603      	mov	r3, r0
 8001464:	71fb      	strb	r3, [r7, #7]
    if (!isOperatorEntered) {
 8001466:	4b09      	ldr	r3, [pc, #36]	; (800148c <handleOperatorInput+0x30>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d10a      	bne.n	8001484 <handleOperatorInput+0x28>
        operator = key;
 800146e:	4a08      	ldr	r2, [pc, #32]	; (8001490 <handleOperatorInput+0x34>)
 8001470:	79fb      	ldrb	r3, [r7, #7]
 8001472:	7013      	strb	r3, [r2, #0]
        LCD_voidSendData(operator);
 8001474:	4b06      	ldr	r3, [pc, #24]	; (8001490 <handleOperatorInput+0x34>)
 8001476:	781b      	ldrb	r3, [r3, #0]
 8001478:	4618      	mov	r0, r3
 800147a:	f7ff fbc3 	bl	8000c04 <LCD_voidSendData>
        isOperatorEntered = 1;
 800147e:	4b03      	ldr	r3, [pc, #12]	; (800148c <handleOperatorInput+0x30>)
 8001480:	2201      	movs	r2, #1
 8001482:	701a      	strb	r2, [r3, #0]
    }
}
 8001484:	bf00      	nop
 8001486:	3708      	adds	r7, #8
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	200000ca 	.word	0x200000ca
 8001490:	200000c8 	.word	0x200000c8

08001494 <calculateResult>:

// Performs the calculation based on the operator and displays the result
void calculateResult() {
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
    switch (operator) {
 8001498:	4b30      	ldr	r3, [pc, #192]	; (800155c <calculateResult+0xc8>)
 800149a:	781b      	ldrb	r3, [r3, #0]
 800149c:	3b2a      	subs	r3, #42	; 0x2a
 800149e:	2b05      	cmp	r3, #5
 80014a0:	d859      	bhi.n	8001556 <calculateResult+0xc2>
 80014a2:	a201      	add	r2, pc, #4	; (adr r2, 80014a8 <calculateResult+0x14>)
 80014a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014a8:	080014f1 	.word	0x080014f1
 80014ac:	080014c1 	.word	0x080014c1
 80014b0:	08001557 	.word	0x08001557
 80014b4:	080014d9 	.word	0x080014d9
 80014b8:	08001557 	.word	0x08001557
 80014bc:	08001509 	.word	0x08001509
        case '+':
            Loc_Sum = num1 + num2;
 80014c0:	4b27      	ldr	r3, [pc, #156]	; (8001560 <calculateResult+0xcc>)
 80014c2:	ed93 7a00 	vldr	s14, [r3]
 80014c6:	4b27      	ldr	r3, [pc, #156]	; (8001564 <calculateResult+0xd0>)
 80014c8:	edd3 7a00 	vldr	s15, [r3]
 80014cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014d0:	4b25      	ldr	r3, [pc, #148]	; (8001568 <calculateResult+0xd4>)
 80014d2:	edc3 7a00 	vstr	s15, [r3]
            break;
 80014d6:	e02f      	b.n	8001538 <calculateResult+0xa4>
        case '-':
            Loc_Sum = num1 - num2;
 80014d8:	4b21      	ldr	r3, [pc, #132]	; (8001560 <calculateResult+0xcc>)
 80014da:	ed93 7a00 	vldr	s14, [r3]
 80014de:	4b21      	ldr	r3, [pc, #132]	; (8001564 <calculateResult+0xd0>)
 80014e0:	edd3 7a00 	vldr	s15, [r3]
 80014e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014e8:	4b1f      	ldr	r3, [pc, #124]	; (8001568 <calculateResult+0xd4>)
 80014ea:	edc3 7a00 	vstr	s15, [r3]
            break;
 80014ee:	e023      	b.n	8001538 <calculateResult+0xa4>
        case '*':
            Loc_Sum = num1 * num2;
 80014f0:	4b1b      	ldr	r3, [pc, #108]	; (8001560 <calculateResult+0xcc>)
 80014f2:	ed93 7a00 	vldr	s14, [r3]
 80014f6:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <calculateResult+0xd0>)
 80014f8:	edd3 7a00 	vldr	s15, [r3]
 80014fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001500:	4b19      	ldr	r3, [pc, #100]	; (8001568 <calculateResult+0xd4>)
 8001502:	edc3 7a00 	vstr	s15, [r3]
            break;
 8001506:	e017      	b.n	8001538 <calculateResult+0xa4>
        case '/':
            if (num2 != 0) {
 8001508:	4b16      	ldr	r3, [pc, #88]	; (8001564 <calculateResult+0xd0>)
 800150a:	edd3 7a00 	vldr	s15, [r3]
 800150e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001516:	d00b      	beq.n	8001530 <calculateResult+0x9c>
                Loc_Sum = num1 / num2;
 8001518:	4b11      	ldr	r3, [pc, #68]	; (8001560 <calculateResult+0xcc>)
 800151a:	edd3 6a00 	vldr	s13, [r3]
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <calculateResult+0xd0>)
 8001520:	ed93 7a00 	vldr	s14, [r3]
 8001524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <calculateResult+0xd4>)
 800152a:	edc3 7a00 	vstr	s15, [r3]
            } else {
                LCD_voidSendString("Err");  // Display error for division by zero
                return;
            }
            break;
 800152e:	e003      	b.n	8001538 <calculateResult+0xa4>
                LCD_voidSendString("Err");  // Display error for division by zero
 8001530:	480e      	ldr	r0, [pc, #56]	; (800156c <calculateResult+0xd8>)
 8001532:	f7ff fba4 	bl	8000c7e <LCD_voidSendString>
                return;
 8001536:	e00f      	b.n	8001558 <calculateResult+0xc4>
        default:
            return;
    }
    LCD_SetGridPos(0,1);
 8001538:	2101      	movs	r1, #1
 800153a:	2000      	movs	r0, #0
 800153c:	f7ff fbbb 	bl	8000cb6 <LCD_SetGridPos>
    LCD_voidSendData('=');
 8001540:	203d      	movs	r0, #61	; 0x3d
 8001542:	f7ff fb5f 	bl	8000c04 <LCD_voidSendData>
    LCD_voidSendNum(Loc_Sum);
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <calculateResult+0xd4>)
 8001548:	edd3 7a00 	vldr	s15, [r3]
 800154c:	eeb0 0a67 	vmov.f32	s0, s15
 8001550:	f7ff fbd6 	bl	8000d00 <LCD_voidSendNum>
 8001554:	e000      	b.n	8001558 <calculateResult+0xc4>
            return;
 8001556:	bf00      	nop
}
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	200000c8 	.word	0x200000c8
 8001560:	200000bc 	.word	0x200000bc
 8001564:	200000c0 	.word	0x200000c0
 8001568:	200000c4 	.word	0x200000c4
 800156c:	08001700 	.word	0x08001700

08001570 <calculatorLoop>:

/********* Main Calculator Loop *********/
void calculatorLoop() {
 8001570:	b580      	push	{r7, lr}
 8001572:	b082      	sub	sp, #8
 8001574:	af00      	add	r7, sp, #0
    uint8_t Loc_KeyVal = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	71fb      	strb	r3, [r7, #7]

    resetCalculator();  // Initialize the calculator
 800157a:	f7ff fefb 	bl	8001374 <resetCalculator>

    while (1) {
        Loc_KeyVal = KEYPAD_GetPressedKey();
 800157e:	f7ff fa43 	bl	8000a08 <KEYPAD_GetPressedKey>
 8001582:	4603      	mov	r3, r0
 8001584:	71fb      	strb	r3, [r7, #7]

        if (Loc_KeyVal == 0xFF) {
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	2bff      	cmp	r3, #255	; 0xff
 800158a:	d027      	beq.n	80015dc <calculatorLoop+0x6c>
            continue;  // No key pressed
        }

        if (Loc_KeyVal >= '0' && Loc_KeyVal <= '9') {
 800158c:	79fb      	ldrb	r3, [r7, #7]
 800158e:	2b2f      	cmp	r3, #47	; 0x2f
 8001590:	d907      	bls.n	80015a2 <calculatorLoop+0x32>
 8001592:	79fb      	ldrb	r3, [r7, #7]
 8001594:	2b39      	cmp	r3, #57	; 0x39
 8001596:	d804      	bhi.n	80015a2 <calculatorLoop+0x32>
            handleNumberInput(Loc_KeyVal);  // Handle number input
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	4618      	mov	r0, r3
 800159c:	f7ff ff12 	bl	80013c4 <handleNumberInput>
 80015a0:	e01d      	b.n	80015de <calculatorLoop+0x6e>
        } else if (Loc_KeyVal == '+' || Loc_KeyVal == '-' || Loc_KeyVal == '*' || Loc_KeyVal == '/') {
 80015a2:	79fb      	ldrb	r3, [r7, #7]
 80015a4:	2b2b      	cmp	r3, #43	; 0x2b
 80015a6:	d008      	beq.n	80015ba <calculatorLoop+0x4a>
 80015a8:	79fb      	ldrb	r3, [r7, #7]
 80015aa:	2b2d      	cmp	r3, #45	; 0x2d
 80015ac:	d005      	beq.n	80015ba <calculatorLoop+0x4a>
 80015ae:	79fb      	ldrb	r3, [r7, #7]
 80015b0:	2b2a      	cmp	r3, #42	; 0x2a
 80015b2:	d002      	beq.n	80015ba <calculatorLoop+0x4a>
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	2b2f      	cmp	r3, #47	; 0x2f
 80015b8:	d104      	bne.n	80015c4 <calculatorLoop+0x54>
            handleOperatorInput(Loc_KeyVal);  // Handle operator input
 80015ba:	79fb      	ldrb	r3, [r7, #7]
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff ff4d 	bl	800145c <handleOperatorInput>
 80015c2:	e00c      	b.n	80015de <calculatorLoop+0x6e>
        } else if (Loc_KeyVal == '=') {
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	2b3d      	cmp	r3, #61	; 0x3d
 80015c8:	d102      	bne.n	80015d0 <calculatorLoop+0x60>
            calculateResult();  // Perform the calculation and display the result
 80015ca:	f7ff ff63 	bl	8001494 <calculateResult>
 80015ce:	e7d6      	b.n	800157e <calculatorLoop+0xe>
        } else if (Loc_KeyVal == 'C') {
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	2b43      	cmp	r3, #67	; 0x43
 80015d4:	d1d3      	bne.n	800157e <calculatorLoop+0xe>
            resetCalculator();  // Clear the display and reset variables
 80015d6:	f7ff fecd 	bl	8001374 <resetCalculator>
 80015da:	e7d0      	b.n	800157e <calculatorLoop+0xe>
            continue;  // No key pressed
 80015dc:	bf00      	nop
        Loc_KeyVal = KEYPAD_GetPressedKey();
 80015de:	e7ce      	b.n	800157e <calculatorLoop+0xe>

080015e0 <main>:
#include "SysTick.h"         // SysTick header for system tick timer
#include "calculator.h"      // Calculator header that contains the core calculator logic

// Main function where the program starts execution
int main(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
    // Configure the system clock to use the external high-speed oscillator (HSE)
    RCC_HSE_Mode(BYPASSED);  // Set HSE mode to bypass external oscillator
 80015e4:	2001      	movs	r0, #1
 80015e6:	f7ff fd93 	bl	8001110 <RCC_HSE_Mode>

    // Enable the HSE (High-Speed External) clock source
    RCC_SetClkStatus(HSE, ON);
 80015ea:	2101      	movs	r1, #1
 80015ec:	2010      	movs	r0, #16
 80015ee:	f7ff fd31 	bl	8001054 <RCC_SetClkStatus>

    // Configure the PLL (Phase Locked Loop) to multiply the HSE frequency to 80 MHz
    RCC_PLL_Config(80, 4, HSE);  /* Set PLL to 80 MHz */
 80015f2:	2210      	movs	r2, #16
 80015f4:	2104      	movs	r1, #4
 80015f6:	2050      	movs	r0, #80	; 0x50
 80015f8:	f7ff fdae 	bl	8001158 <RCC_PLL_Config>

    // Set the system clock to use the PLL as the main clock source
    RCC_SetSysClk(PLL);          /* Set system clock to PLL */
 80015fc:	2018      	movs	r0, #24
 80015fe:	f7ff fd5f 	bl	80010c0 <RCC_SetSysClk>

    // Enable the clock for GPIO ports A, B, and C (used for LCD, keypad, etc.)
    RCC_AHB1_EnableClk(GPIOAEN); /* Enable clock for GPIOA */
 8001602:	2000      	movs	r0, #0
 8001604:	f7ff fe4c 	bl	80012a0 <RCC_AHB1_EnableClk>
    RCC_AHB1_EnableClk(GPIOBEN); /* Enable clock for GPIOB */
 8001608:	2001      	movs	r0, #1
 800160a:	f7ff fe49 	bl	80012a0 <RCC_AHB1_EnableClk>
    RCC_AHB1_EnableClk(GPIOCEN); /* Enable clock for GPIOC */
 800160e:	2002      	movs	r0, #2
 8001610:	f7ff fe46 	bl	80012a0 <RCC_AHB1_EnableClk>

    // Enable the Floating Point Unit (FPU) for handling floating-point operations
    EnableFPU();
 8001614:	f7fe ffd2 	bl	80005bc <EnableFPU>

    // Initialize the keypad for user input
    KEYPAD_init();
 8001618:	f7ff f988 	bl	800092c <KEYPAD_init>

    // Configure the pins used by the LCD and initialize it
    LCD_PinConfig();
 800161c:	f7ff fa6a 	bl	8000af4 <LCD_PinConfig>
    LCD_voidInit();
 8001620:	f7ff fb11 	bl	8000c46 <LCD_voidInit>

    // Enter the main calculator loop where user input is processed and displayed
    calculatorLoop();
 8001624:	f7ff ffa4 	bl	8001570 <calculatorLoop>

    // Infinite loop to keep the program running (can be replaced by system tasks if necessary)
    while(1);
 8001628:	e7fe      	b.n	8001628 <main+0x48>
	...

0800162c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800162c:	480d      	ldr	r0, [pc, #52]	; (8001664 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800162e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001630:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001634:	480c      	ldr	r0, [pc, #48]	; (8001668 <LoopForever+0x6>)
  ldr r1, =_edata
 8001636:	490d      	ldr	r1, [pc, #52]	; (800166c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001638:	4a0d      	ldr	r2, [pc, #52]	; (8001670 <LoopForever+0xe>)
  movs r3, #0
 800163a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800163c:	e002      	b.n	8001644 <LoopCopyDataInit>

0800163e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800163e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001640:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001642:	3304      	adds	r3, #4

08001644 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001644:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001646:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001648:	d3f9      	bcc.n	800163e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800164a:	4a0a      	ldr	r2, [pc, #40]	; (8001674 <LoopForever+0x12>)
  ldr r4, =_ebss
 800164c:	4c0a      	ldr	r4, [pc, #40]	; (8001678 <LoopForever+0x16>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001650:	e001      	b.n	8001656 <LoopFillZerobss>

08001652 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001652:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001654:	3204      	adds	r2, #4

08001656 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001656:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001658:	d3fb      	bcc.n	8001652 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800165a:	f000 f811 	bl	8001680 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800165e:	f7ff ffbf 	bl	80015e0 <main>

08001662 <LoopForever>:

LoopForever:
  b LoopForever
 8001662:	e7fe      	b.n	8001662 <LoopForever>
  ldr   r0, =_estack
 8001664:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001668:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800166c:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001670:	0800170c 	.word	0x0800170c
  ldr r2, =_sbss
 8001674:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001678:	200000cc 	.word	0x200000cc

0800167c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800167c:	e7fe      	b.n	800167c <ADC_IRQHandler>
	...

08001680 <__libc_init_array>:
 8001680:	b570      	push	{r4, r5, r6, lr}
 8001682:	4d0d      	ldr	r5, [pc, #52]	; (80016b8 <__libc_init_array+0x38>)
 8001684:	4c0d      	ldr	r4, [pc, #52]	; (80016bc <__libc_init_array+0x3c>)
 8001686:	1b64      	subs	r4, r4, r5
 8001688:	10a4      	asrs	r4, r4, #2
 800168a:	2600      	movs	r6, #0
 800168c:	42a6      	cmp	r6, r4
 800168e:	d109      	bne.n	80016a4 <__libc_init_array+0x24>
 8001690:	4d0b      	ldr	r5, [pc, #44]	; (80016c0 <__libc_init_array+0x40>)
 8001692:	4c0c      	ldr	r4, [pc, #48]	; (80016c4 <__libc_init_array+0x44>)
 8001694:	f000 f818 	bl	80016c8 <_init>
 8001698:	1b64      	subs	r4, r4, r5
 800169a:	10a4      	asrs	r4, r4, #2
 800169c:	2600      	movs	r6, #0
 800169e:	42a6      	cmp	r6, r4
 80016a0:	d105      	bne.n	80016ae <__libc_init_array+0x2e>
 80016a2:	bd70      	pop	{r4, r5, r6, pc}
 80016a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80016a8:	4798      	blx	r3
 80016aa:	3601      	adds	r6, #1
 80016ac:	e7ee      	b.n	800168c <__libc_init_array+0xc>
 80016ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80016b2:	4798      	blx	r3
 80016b4:	3601      	adds	r6, #1
 80016b6:	e7f2      	b.n	800169e <__libc_init_array+0x1e>
 80016b8:	08001704 	.word	0x08001704
 80016bc:	08001704 	.word	0x08001704
 80016c0:	08001704 	.word	0x08001704
 80016c4:	08001708 	.word	0x08001708

080016c8 <_init>:
 80016c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016ca:	bf00      	nop
 80016cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016ce:	bc08      	pop	{r3}
 80016d0:	469e      	mov	lr, r3
 80016d2:	4770      	bx	lr

080016d4 <_fini>:
 80016d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016d6:	bf00      	nop
 80016d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016da:	bc08      	pop	{r3}
 80016dc:	469e      	mov	lr, r3
 80016de:	4770      	bx	lr
